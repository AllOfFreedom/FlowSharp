<?xml version="1.0" encoding="utf-16"?>
<ArrayOfElementPropertyBag xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="c36b2b2f-10c6-4326-8561-bcb7c26dc456" Visible="true" Text="Weather&#xD;&#xA;Forecast" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>761</X>
        <Y>93</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>761</X>
      <Y>93</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"WeatherForecast","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="bdf74373-a34c-4d79-b8ca-cf129d761997" Visible="true" Text="Weather&#xD;&#xA;Forecast" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>123</X>
        <Y>170</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>123</X>
      <Y>170</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\nusing Clifton.Core.Semantics;\r\n\r\nusing WeatherUndergroundStructure;\r\n\r\nnamespace App\r\n{\r\n\tpublic class WeatherForecast : IReceptor\r\n\t{\r\n\t\tprivate static Form form;\r\n\t\t\r\n\t\t// [Publishes(typeof(ST_Address))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_Address address)\r\n\t\t{\r\n\t\t\tstring json = Http.Get(\"http://api.wunderground.com/api/b40178bc0e56a80d/forecast/q/\" + address.State.State + \"/\" + address.City.City + \".json\");\t\t\r\n\t\t\t// Program.Log(json);\r\n\t\t\t\r\n            var data = WeatherUndergroundStructure.WeatherUnderground.FromJson(json);\r\n\r\n            var dayNightForecast = data.Forecast.TxtForecast.Forecastday.Select(d =&gt;\r\n                new\r\n                {\r\n                    Title = d.Title,\r\n                    Text = d.Fcttext,\r\n                    IconUrl = d.IconUrl,\r\n                }\r\n            ).ToList();\r\n\r\n            var statForecast = data.Forecast.Simpleforecast.Forecastday.Select(d =&gt;\r\n                    new\r\n                {\r\n                    Month = d.Date.Monthname,\r\n                    Day = d.Date.Day,\r\n                    Weekday = d.Date.Weekday,\r\n                    High = d.High.Fahrenheit,\r\n                    Low = d.Low.Fahrenheit,\r\n                    Conditions = d.Conditions,\r\n                    IconUrl = d.IconUrl,\r\n                    MaxWind = d.Maxwind.Mph,\r\n                }\r\n            ).ToList();\r\n            \r\n            if (form != null)\r\n            {\r\n            \tProgram.form.BeginInvoke(()=&gt;form.Close());\r\n            }\r\n\r\n\t\t\t// form = Program.layoutManager.RequestForm(900, 500, \"Weather Forecast\", false);\r\n            form = new Form();\r\n            form.Text = \"Weather Forecast\";\r\n            form.Location = new Point(20, 20);\r\n            form.Size = new Size(900, 500);\r\n            form.StartPosition = FormStartPosition.Manual;\r\n\r\n            int statCount = statForecast.Count;\r\n\r\n            int daynightIdx = 0;\r\n            int vspacing = 110;\r\n\r\n            for (int i = 0; i &lt; statCount; i++)\r\n            {\r\n                for (int j = 0; j &lt; 2; j++)\r\n                {\r\n                    // day/night forecast:\r\n                    int xoffset = 200 + (daynightIdx % 2) * 300;\r\n                    Label lblTitle = new Label();\r\n                    lblTitle.Text = dayNightForecast[daynightIdx].Title;\r\n                    lblTitle.Location = new Point(xoffset, i * vspacing);\r\n                    lblTitle.AutoSize = true;\r\n                    form.Controls.Add(lblTitle);\r\n\r\n                    PictureBox pbDayNight = new PictureBox();\r\n                    pbDayNight.Location = new Point(xoffset, 20 + i * vspacing);\r\n                    pbDayNight.Size = new Size(50, 50);\r\n                    pbDayNight.ImageLocation = dayNightForecast[daynightIdx].IconUrl;\r\n                    form.Controls.Add(pbDayNight);\r\n\r\n                    Label lblDayNightText = new Label();\r\n                    lblDayNightText.Text = dayNightForecast[daynightIdx].Text;\r\n                    lblDayNightText.Location = new Point(xoffset + 60, 20 + i * vspacing);\r\n                    lblDayNightText.Size = new Size(200, 50);\r\n                    form.Controls.Add(lblDayNightText);\r\n\r\n                    ++daynightIdx;\r\n                }\r\n\r\n                // Daily forecast\r\n                Label lblDate = new Label();\r\n                lblDate.Text = statForecast[i].Weekday+ \" \" + statForecast[i].Month + \" \" + statForecast[i].Day;\r\n                lblDate.Location = new Point(0, i * vspacing);\r\n                lblDate.AutoSize = true;\r\n                form.Controls.Add(lblDate);\r\n\r\n                PictureBox pb = new PictureBox();\r\n                pb.Location = new Point(0, 20 + i * vspacing);\r\n                pb.Size = new Size(50, 50);\r\n                pb.ImageLocation = statForecast[i].IconUrl;\r\n                form.Controls.Add(pb);\r\n\r\n                Label lblConditions = new Label();\r\n                lblConditions.Text = statForecast[i].Conditions;\r\n                lblConditions.Location = new Point(60, 20 + i * vspacing);\r\n                lblConditions.AutoSize = true;\r\n                form.Controls.Add(lblConditions);\r\n\r\n                Label lblLow = new Label();\r\n                lblLow.Text = \"Low: \" + statForecast[i].Low;\r\n                lblLow.Location = new Point(60, 40 + i * vspacing);\r\n                lblLow.AutoSize = true;\r\n                form.Controls.Add(lblLow);\r\n\r\n                Label lblHigh = new Label();\r\n                lblHigh.Text = \"High: \" + statForecast[i].High;\r\n                lblHigh.Location = new Point(60 + 50, 40 + i * vspacing);\r\n                lblHigh.AutoSize = true;\r\n                form.Controls.Add(lblHigh);\r\n            }\r\n\r\n\t\t\tProgram.form.BeginInvoke(()=&gt;form.Show());\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="b6be89db-22c0-4a88-8e66-bcfdbdf6b560" Visible="true" Text="WeatherUnderground.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>599</X>
        <Y>-927</Y>
      </Location>
      <Size>
        <Width>246</Width>
        <Height>25</Height>
      </Size>
      <X>599</X>
      <Y>-927</Y>
      <Width>246</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>WeatherUnderground.cs</ExtraData>
    <Json>{"csharp":"","Code":"// created by https://quicktype.io/\r\nusing System.Collections.Generic;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nnamespace WeatherUndergroundStructure\r\n{\r\n    public partial class WeatherUnderground\r\n    {\r\n        [JsonProperty(\"forecast\")]\r\n        public Forecast Forecast { get; set; }\r\n\r\n        [JsonProperty(\"response\")]\r\n        public Response Response { get; set; }\r\n    }\r\n\r\n    public partial class Response\r\n    {\r\n        [JsonProperty(\"features\")]\r\n        public Features Features { get; set; }\r\n\r\n        [JsonProperty(\"termsofService\")]\r\n        public string TermsofService { get; set; }\r\n\r\n        [JsonProperty(\"version\")]\r\n        public string Version { get; set; }\r\n    }\r\n\r\n    public partial class Features\r\n    {\r\n        [JsonProperty(\"forecast\")]\r\n        public long Forecast { get; set; }\r\n    }\r\n\r\n    public partial class Forecast\r\n    {\r\n        [JsonProperty(\"simpleforecast\")]\r\n        public Simpleforecast Simpleforecast { get; set; }\r\n\r\n        [JsonProperty(\"txt_forecast\")]\r\n        public TxtForecast TxtForecast { get; set; }\r\n    }\r\n\r\n    public partial class TxtForecast\r\n    {\r\n        [JsonProperty(\"date\")]\r\n        public string Date { get; set; }\r\n\r\n        [JsonProperty(\"forecastday\")]\r\n        public List&lt;TextForecastday&gt; Forecastday { get; set; }\r\n    }\r\n\r\n    public partial class TextForecastday\r\n    {\r\n        [JsonProperty(\"fcttext\")]\r\n        public string Fcttext { get; set; }\r\n\r\n        [JsonProperty(\"fcttext_metric\")]\r\n        public string FcttextMetric { get; set; }\r\n\r\n        [JsonProperty(\"icon\")]\r\n        public string Icon { get; set; }\r\n\r\n        [JsonProperty(\"icon_url\")]\r\n        public string IconUrl { get; set; }\r\n\r\n        [JsonProperty(\"period\")]\r\n        public long Period { get; set; }\r\n\r\n        [JsonProperty(\"pop\")]\r\n        public string Pop { get; set; }\r\n\r\n        [JsonProperty(\"title\")]\r\n        public string Title { get; set; }\r\n    }\r\n\r\n    public partial class Simpleforecast\r\n    {\r\n        [JsonProperty(\"forecastday\")]\r\n        public List&lt;StatsForecastday&gt; Forecastday { get; set; }\r\n    }\r\n\r\n    public partial class StatsForecastday\r\n    {\r\n        [JsonProperty(\"avehumidity\")]\r\n        public long Avehumidity { get; set; }\r\n\r\n        [JsonProperty(\"avewind\")]\r\n        public Wind Avewind { get; set; }\r\n\r\n        [JsonProperty(\"conditions\")]\r\n        public string Conditions { get; set; }\r\n\r\n        [JsonProperty(\"date\")]\r\n        public Date Date { get; set; }\r\n\r\n        [JsonProperty(\"high\")]\r\n        public High High { get; set; }\r\n\r\n        [JsonProperty(\"icon\")]\r\n        public string Icon { get; set; }\r\n\r\n        [JsonProperty(\"icon_url\")]\r\n        public string IconUrl { get; set; }\r\n\r\n        [JsonProperty(\"low\")]\r\n        public High Low { get; set; }\r\n\r\n        [JsonProperty(\"maxhumidity\")]\r\n        public long Maxhumidity { get; set; }\r\n\r\n        [JsonProperty(\"maxwind\")]\r\n        public Wind Maxwind { get; set; }\r\n\r\n        [JsonProperty(\"minhumidity\")]\r\n        public long Minhumidity { get; set; }\r\n\r\n        [JsonProperty(\"period\")]\r\n        public long Period { get; set; }\r\n\r\n        [JsonProperty(\"pop\")]\r\n        public long Pop { get; set; }\r\n\r\n        [JsonProperty(\"qpf_allday\")]\r\n        public Qpf QpfAllday { get; set; }\r\n\r\n        [JsonProperty(\"qpf_day\")]\r\n        public QpfDay QpfDay { get; set; }\r\n\r\n        [JsonProperty(\"qpf_night\")]\r\n        public Qpf QpfNight { get; set; }\r\n\r\n        [JsonProperty(\"skyicon\")]\r\n        public string Skyicon { get; set; }\r\n\r\n        [JsonProperty(\"snow_allday\")]\r\n        public Snow SnowAllday { get; set; }\r\n\r\n        [JsonProperty(\"snow_day\")]\r\n        public SnowDay SnowDay { get; set; }\r\n\r\n        [JsonProperty(\"snow_night\")]\r\n        public Snow SnowNight { get; set; }\r\n    }\r\n\r\n    public partial class SnowDay\r\n    {\r\n        [JsonProperty(\"cm\")]\r\n        public long? Cm { get; set; }\r\n\r\n        [JsonProperty(\"in\")]\r\n        public long? In { get; set; }\r\n    }\r\n\r\n    public partial class Snow\r\n    {\r\n        [JsonProperty(\"cm\")]\r\n        public long Cm { get; set; }\r\n\r\n        [JsonProperty(\"in\")]\r\n        public long In { get; set; }\r\n    }\r\n\r\n    public partial class QpfDay\r\n    {\r\n        [JsonProperty(\"in\")]\r\n        public double? In { get; set; }\r\n\r\n        [JsonProperty(\"mm\")]\r\n        public long? Mm { get; set; }\r\n    }\r\n\r\n    public partial class Qpf\r\n    {\r\n        [JsonProperty(\"in\")]\r\n        public double In { get; set; }\r\n\r\n        [JsonProperty(\"mm\")]\r\n        public long Mm { get; set; }\r\n    }\r\n\r\n    public partial class High\r\n    {\r\n        [JsonProperty(\"celsius\")]\r\n        public string Celsius { get; set; }\r\n\r\n        [JsonProperty(\"fahrenheit\")]\r\n        public string Fahrenheit { get; set; }\r\n    }\r\n\r\n    public partial class Date\r\n    {\r\n        [JsonProperty(\"ampm\")]\r\n        public string Ampm { get; set; }\r\n\r\n        [JsonProperty(\"day\")]\r\n        public long Day { get; set; }\r\n\r\n        [JsonProperty(\"epoch\")]\r\n        public string Epoch { get; set; }\r\n\r\n        [JsonProperty(\"hour\")]\r\n        public long Hour { get; set; }\r\n\r\n        [JsonProperty(\"isdst\")]\r\n        public string Isdst { get; set; }\r\n\r\n        [JsonProperty(\"min\")]\r\n        public string Min { get; set; }\r\n\r\n        [JsonProperty(\"month\")]\r\n        public long Month { get; set; }\r\n\r\n        [JsonProperty(\"monthname\")]\r\n        public string Monthname { get; set; }\r\n\r\n        [JsonProperty(\"monthname_short\")]\r\n        public string MonthnameShort { get; set; }\r\n\r\n        [JsonProperty(\"pretty\")]\r\n        public string Pretty { get; set; }\r\n\r\n        [JsonProperty(\"sec\")]\r\n        public long Sec { get; set; }\r\n\r\n        [JsonProperty(\"tz_long\")]\r\n        public string TzLong { get; set; }\r\n\r\n        [JsonProperty(\"tz_short\")]\r\n        public string TzShort { get; set; }\r\n\r\n        [JsonProperty(\"weekday\")]\r\n        public string Weekday { get; set; }\r\n\r\n        [JsonProperty(\"weekday_short\")]\r\n        public string WeekdayShort { get; set; }\r\n\r\n        [JsonProperty(\"yday\")]\r\n        public long Yday { get; set; }\r\n\r\n        [JsonProperty(\"year\")]\r\n        public long Year { get; set; }\r\n    }\r\n\r\n    public partial class Wind\r\n    {\r\n        [JsonProperty(\"degrees\")]\r\n        public long Degrees { get; set; }\r\n\r\n        [JsonProperty(\"dir\")]\r\n        public string Dir { get; set; }\r\n\r\n        [JsonProperty(\"kph\")]\r\n        public long Kph { get; set; }\r\n\r\n        [JsonProperty(\"mph\")]\r\n        public long Mph { get; set; }\r\n    }\r\n\r\n    public partial class WeatherUnderground\r\n    {\r\n        public static WeatherUnderground FromJson(string json)\r\n        {\r\n            return JsonConvert.DeserializeObject&lt;WeatherUnderground&gt;(json, Converter.Settings);\r\n        }\r\n    }\r\n\r\n    public static class Serialize\r\n    {\r\n        public static string ToJson(this WeatherUnderground self)\r\n        {\r\n            return JsonConvert.SerializeObject(self, Converter.Settings);\r\n        }\r\n    }\r\n\r\n    public class Converter\r\n    {\r\n        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings\r\n        {\r\n            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,\r\n            DateParseHandling = DateParseHandling.None,\r\n        };\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="Agents" ElementName="PluginExample.NavTo, PluginExample, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="8689247b-328e-405b-adc5-153200df80a4" Visible="true" Text="To Code" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>149</X>
        <Y>80</Y>
      </Location>
      <Size>
        <Width>74</Width>
        <Height>60</Height>
      </Size>
      <X>149</X>
      <Y>80</Y>
      <Width>74</Width>
      <Height>60</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"NavigateTo":"Code"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="Code" ElementName="PluginExample.NavTo, PluginExample, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="40cd08e6-9d57-4701-99b3-08e08108ecd8" Visible="true" Text="Code" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1044</X>
        <Y>-827</Y>
      </Location>
      <Size>
        <Width>60</Width>
        <Height>60</Height>
      </Size>
      <X>1044</X>
      <Y>-827</Y>
      <Width>60</Width>
      <Height>60</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"NavigateTo":""}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="" ElementName="PluginExample.NavTo, PluginExample, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="97679b88-ba3c-4cf9-ada7-6610caa38e32" Visible="true" Text="To Agents" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>875</X>
        <Y>-888</Y>
      </Location>
      <Size>
        <Width>85</Width>
        <Height>60</Height>
      </Size>
      <X>875</X>
      <Y>-888</Y>
      <Width>85</Width>
      <Height>60</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"NavigateTo":"Agents"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="427e2990-93a5-4af4-bab9-b1b2974fa329" Visible="true" Text="Canvas.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1105</X>
        <Y>-906</Y>
      </Location>
      <Size>
        <Width>246</Width>
        <Height>25</Height>
      </Size>
      <X>1105</X>
      <Y>-906</Y>
      <Width>246</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>Canvas.cs</ExtraData>
    <Json>{"csharp":"","Code":"// https://www.codeproject.com/Articles/210979/Fast-optimizing-rectangle-packing-algorithm-for-bu\r\nusing System;\r\n\r\nnamespace Mapper\r\n{\r\n    /// &lt;summary&gt;\r\n    /// This type of canvas places rectangles as far to the left as possible (lowest X).\r\n    /// If there is a choice between locations with the same X, it will pick the one with the \r\n    /// lowest Y.\r\n    /// &lt;/summary&gt;\r\n    public class Canvas\r\n    {\r\n        public struct CanvasCell\r\n        {\r\n            public bool occupied;\r\n\r\n            public CanvasCell(bool occupied) { this.occupied = occupied; }\r\n\r\n            public override string ToString() { return occupied ? \"x\" : \".\"; }\r\n        }\r\n\r\n        private DynamicTwoDimensionalArray&lt;CanvasCell&gt; _canvasCells =\r\n            new DynamicTwoDimensionalArray&lt;CanvasCell&gt;();\r\n\r\n        // Make _canvasCells available to canvas classes derived from this class.\r\n        protected DynamicTwoDimensionalArray&lt;CanvasCell&gt; CanvasCells { get { return _canvasCells; } }\r\n\r\n        private int _nbrRectangleAddAttempts = 0;\r\n        public int NbrRectangleAddAttempts { get { return _nbrRectangleAddAttempts; } }\r\n\r\n        private int _canvasWidth = 0;\r\n        private int _canvasHeight = 0;\r\n\r\n        // Lowest free height deficit found since the last call to SetCanvasDimension\r\n        private int _lowestFreeHeightDeficitSinceLastRedim = Int32.MaxValue;\r\n        private int _lowestFreeWidthDeficitSinceLastRedim = Int32.MaxValue;\r\n\r\n        private int _nbrCellsGenerated = 0;\r\n\r\n        public Canvas()\r\n        {\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// See ICanvas\r\n        /// &lt;/summary&gt;\r\n        public int UnlimitedSize { get { return short.MaxValue; } }\r\n\r\n        /// &lt;summary&gt;\r\n        /// See ICanvas\r\n        /// &lt;/summary&gt;\r\n        public virtual void SetCanvasDimensions(int canvasWidth, int canvasHeight)\r\n        {\r\n            // Right now, it is unknown how many rectangles need to be placed.\r\n            // So guess that a 100 by 100 capacity will be enough.\r\n            const int initialCapacityX = 100;\r\n            const int initialCapacityY = 100;\r\n\r\n            // Initially, there is one free cell, which covers the entire canvas.\r\n            _canvasCells.Initialize(initialCapacityX, initialCapacityY, canvasWidth, canvasHeight, new CanvasCell(false));\r\n\r\n            _nbrCellsGenerated = 0;\r\n            _nbrRectangleAddAttempts = 0;\r\n            _lowestFreeHeightDeficitSinceLastRedim = Int32.MaxValue;\r\n\r\n            _canvasWidth = canvasWidth;\r\n            _canvasHeight = canvasHeight;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// See ICanvas.\r\n        /// &lt;/summary&gt;\r\n        public virtual bool AddRectangle(\r\n            int rectangleWidth, int rectangleHeight, out int rectangleXOffset, out int rectangleYOffset, bool preferVertical = true)\r\n        {\r\n            rectangleXOffset = 0;\r\n            rectangleYOffset = 0;\r\n\r\n            int requiredWidth = rectangleWidth;\r\n            int requiredHeight = rectangleHeight;\r\n\r\n            _nbrRectangleAddAttempts++;\r\n\r\n            int x = 0;\r\n            int y = 0;\r\n            int offsetX = 0;\r\n            int offsetY = 0;\r\n            bool rectangleWasPlaced = false;\r\n            int nbrColumns = _canvasCells.NbrColumns;\r\n            int nbrRows = _canvasCells.NbrRows;\r\n\r\n            do\r\n            {\r\n                int nbrRequiredCellsHorizontally;\r\n                int nbrRequiredCellsVertically;\r\n                int leftOverWidth;\r\n                int leftOverHeight;\r\n\r\n                // First move upwards until we find an unoccupied cell. \r\n                // If we're already at an unoccupied cell, no need to do anything.\r\n                // Important to clear all occupied cells to get \r\n                // the lowest free height deficit. This must be taken from the top of the highest \r\n                // occupied cell.\r\n\r\n                if (preferVertical)\r\n                {\r\n                    while ((y &lt; nbrRows) &amp;&amp; (_canvasCells.Item(x, y).occupied))\r\n                    {\r\n                        offsetY += _canvasCells.RowHeight(y);\r\n                        y += 1;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    while ((x &lt; nbrColumns) &amp;&amp; (_canvasCells.Item(x, y).occupied))\r\n                    {\r\n                        offsetX += _canvasCells.ColumnWidth(x);\r\n                        x += 1;\r\n                    }\r\n                }\r\n\r\n                // If we found an unoccupied cell, than see if we can place a rectangle there.\r\n                // If not, than y popped out of the top of the canvas.\r\n\r\n                bool testCell;\r\n\r\n                if (preferVertical)\r\n                {\r\n                    testCell = (y &lt; nbrRows) &amp;&amp; (FreeHeightDeficit(_canvasHeight, offsetY, requiredHeight) &lt;= 0);\r\n                }\r\n                else\r\n                {\r\n                    testCell = (x &lt; nbrColumns) &amp;&amp; (FreeWidthDeficit(_canvasWidth, offsetX, requiredWidth) &lt;= 0);\r\n                }\r\n\r\n                if (testCell)\r\n                {\r\n                    if (IsAvailable(\r\n                        x, y, requiredWidth, requiredHeight,\r\n                        out nbrRequiredCellsHorizontally, out nbrRequiredCellsVertically,\r\n                        out leftOverWidth, out leftOverHeight))\r\n                    {\r\n                        PlaceRectangle(\r\n                            x, y, requiredWidth, requiredHeight,\r\n                            nbrRequiredCellsHorizontally, nbrRequiredCellsVertically,\r\n                            leftOverWidth, leftOverHeight);\r\n\r\n                        rectangleXOffset = offsetX;\r\n                        rectangleYOffset = offsetY;\r\n\r\n                        rectangleWasPlaced = true;\r\n                        break;\r\n                    }\r\n\r\n                    if (preferVertical)\r\n                    {\r\n                        // Go to the next cell\r\n                        offsetY += _canvasCells.RowHeight(y);\r\n                        y += 1;\r\n                    }\r\n                    else\r\n                    {\r\n                        offsetX += _canvasCells.ColumnWidth(x);\r\n                        x += 1;\r\n                    }\r\n                }\r\n\r\n                // If we've come so close to the top of the canvas that there is no space for the\r\n                // rectangle, go to the next column. This automatically also checks whether we've popped out of the top\r\n                // of the canvas (in that case, _canvasHeight == offsetY).\r\n\r\n                int deficit;\r\n\r\n                if (preferVertical)\r\n                {\r\n                    deficit = FreeHeightDeficit(_canvasHeight, offsetY, requiredHeight);\r\n                }\r\n                else\r\n                {\r\n                    deficit = FreeWidthDeficit(_canvasWidth, offsetX, requiredWidth);\r\n                }\r\n\r\n                if (deficit &gt; 0)\r\n                {\r\n                    if (preferVertical)\r\n                    {\r\n                        offsetY = 0;\r\n                        y = 0;\r\n\r\n                        offsetX += _canvasCells.ColumnWidth(x);\r\n                        x += 1;\r\n\r\n                        // This update is far from perfect, because if the rectangle could not be placed at this column\r\n                        // because of insufficient horizontal space, than this update should not be made (because it may lower\r\n                        // _lowestFreeHeightDeficitSinceLastRedim while in raising the height of the canvas by this lowered amount\r\n                        // may not result in the rectangle being placed here after all.\r\n                        //\r\n                        // However, checking for sufficient horizontal width takes a lot of CPU ticks. Tests have shown that this\r\n                        // far outstrips the gains through having fewer failed sprite generations.\r\n                        if (_lowestFreeHeightDeficitSinceLastRedim &gt; deficit) { _lowestFreeHeightDeficitSinceLastRedim = deficit; }\r\n                    }\r\n\r\n                    // If we've come so close to the right edge of the canvas that there is no space for\r\n                    // the rectangle, return false now.\r\n                    if ((_canvasWidth - offsetX) &lt; requiredWidth)\r\n                    {\r\n                        rectangleWasPlaced = false;\r\n                        break;\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    offsetX = 0;\r\n                    x = 0;\r\n\r\n                    offsetY += _canvasCells.RowHeight(y);\r\n                    y += 1;\r\n\r\n                    // This update is far from perfect, because if the rectangle could not be placed at this column\r\n                    // because of insufficient horizontal space, than this update should not be made (because it may lower\r\n                    // _lowestFreeHeightDeficitSinceLastRedim while in raising the height of the canvas by this lowered amount\r\n                    // may not result in the rectangle being placed here after all.\r\n                    //\r\n                    // However, checking for sufficient horizontal width takes a lot of CPU ticks. Tests have shown that this\r\n                    // far outstrips the gains through having fewer failed sprite generations.\r\n                    if (_lowestFreeWidthDeficitSinceLastRedim &gt; deficit) { _lowestFreeWidthDeficitSinceLastRedim = deficit; }\r\n                }\r\n\r\n                // If we've come so close to the right edge of the canvas that there is no space for\r\n                // the rectangle, return false now.\r\n                if ((_canvasHeight - offsetY) &lt; requiredHeight)\r\n                {\r\n                    rectangleWasPlaced = false;\r\n                    break;\r\n                }\r\n            } while (true);\r\n\r\n            return rectangleWasPlaced;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Works out the free height deficit when placing a rectangle with a required height at a given offset.\r\n        /// \r\n        /// If the free height deficit is 0 or negative, there may be room to place the rectangle (still need to check for blocking\r\n        /// occupied cells).\r\n        /// \r\n        /// If the free height deficit is greater than 0, you're too close to the top edge of the canvas to place the rectangle.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"canvasHeight\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"offsetY\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"requiredHeight\"&gt;&lt;/param&gt;\r\n        /// &lt;returns&gt;&lt;/returns&gt;\r\n        private int FreeHeightDeficit(int canvasHeight, int offsetY, int requiredHeight)\r\n        {\r\n            int spaceLeftVertically = canvasHeight - offsetY;\r\n            int freeHeightDeficit = requiredHeight - spaceLeftVertically;\r\n\r\n            return freeHeightDeficit;\r\n        }\r\n\r\n        private int FreeWidthDeficit(int canvasWidth, int offsetX, int requiredWidth)\r\n        {\r\n            int spaceLeftHorizontally = canvasWidth - offsetX;\r\n            int freeWidthDeficit = requiredWidth - spaceLeftHorizontally;\r\n\r\n            return freeWidthDeficit;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Sets the cell at x,y to occupied, and also its top and right neighbours, as needed\r\n        /// to place a rectangle with the given width and height.\r\n        /// \r\n        /// If the rectangle takes only part of a row or column, they are split.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"x\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"y\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"requiredWidth\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"requiredHeight\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"nbrRequiredCellsHorizontally\"&gt;\r\n        /// Number of cells that the rectangle requires horizontally\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"nbrRequiredCellsVertically\"&gt;\r\n        /// Number of cells that the rectangle requires vertically\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"leftOverWidth\"&gt;\r\n        /// The amount of horizontal space left in the right most cells that could be used for the rectangle\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"leftOverHeight\"&gt;\r\n        /// The amount of vertical space left in the bottom most cells that could be used for the rectangle\r\n        /// &lt;/param&gt;\r\n        private void PlaceRectangle(\r\n            int x, int y, \r\n            int requiredWidth, int requiredHeight,\r\n            int nbrRequiredCellsHorizontally, int nbrRequiredCellsVertically,\r\n            int leftOverWidth,\r\n            int leftOverHeight)\r\n        {\r\n            // Split the far most row and column if needed.\r\n\r\n            if (leftOverWidth &gt; 0)\r\n            {\r\n                _nbrCellsGenerated += _canvasCells.NbrRows;\r\n\r\n                int xFarRightColumn = x + nbrRequiredCellsHorizontally - 1;\r\n                _canvasCells.InsertColumn(xFarRightColumn, leftOverWidth);\r\n            }\r\n\r\n            if (leftOverHeight &gt; 0)\r\n            {\r\n                _nbrCellsGenerated += _canvasCells.NbrColumns;\r\n\r\n                int yFarBottomColumn = y + nbrRequiredCellsVertically - 1;\r\n                _canvasCells.InsertRow(yFarBottomColumn, leftOverHeight);\r\n            }\r\n\r\n            for (int i = x + nbrRequiredCellsHorizontally - 1; i &gt;= x; i--)\r\n            {\r\n                for (int j = y + nbrRequiredCellsVertically - 1; j &gt;= y; j--)\r\n                {\r\n                    _canvasCells.SetItem(i, j, new CanvasCell(true));\r\n                }\r\n            }\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Returns true if a rectangle with the given width and height can be placed\r\n        /// in the cell with the given x and y, and its right and top neighbours.\r\n        /// \r\n        /// This method assumes that x,y is far away enough from the edges of the canvas\r\n        /// that the rectangle could actually fit. So this method only looks at whether cells\r\n        /// are occupied or not.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"x\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"y\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"requiredWidth\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"requiredHeight\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"nbrRequiredCellsHorizontally\"&gt;\r\n        /// Number of cells that the rectangle requires horizontally\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"nbrRequiredCellsVertically\"&gt;\r\n        /// Number of cells that the rectangle requires vertically\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"leftOverWidth\"&gt;\r\n        /// The amount of horizontal space left in the right most cells that could be used for the rectangle\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"leftOverHeight\"&gt;\r\n        /// The amount of vertical space left in the bottom most cells that could be used for the rectangle\r\n        /// &lt;/param&gt;\r\n        /// &lt;returns&gt;&lt;/returns&gt;\r\n        private bool IsAvailable(\r\n            int x, int y, int requiredWidth, int requiredHeight, \r\n            out int nbrRequiredCellsHorizontally,\r\n            out int nbrRequiredCellsVertically,\r\n            out int leftOverWidth,\r\n            out int leftOverHeight)\r\n        {\r\n            nbrRequiredCellsHorizontally = 0;\r\n            nbrRequiredCellsVertically = 0;\r\n            leftOverWidth = 0;\r\n            leftOverHeight = 0;\r\n\r\n            int foundWidth = 0;\r\n            int foundHeight = 0;\r\n            int trialX = x;\r\n            int trialY = y;\r\n\r\n            // Check all cells that need to be unoccupied for there to be room for the rectangle.\r\n\r\n            while (foundHeight &lt; requiredHeight)\r\n            {\r\n                trialX = x;\r\n                foundWidth = 0;\r\n\r\n                while (foundWidth &lt; requiredWidth)\r\n                {\r\n                    if (_canvasCells.Item(trialX, trialY).occupied)\r\n                    {\r\n                        return false;\r\n                    }\r\n\r\n                    foundWidth += _canvasCells.ColumnWidth(trialX);\r\n                    trialX++;\r\n                }\r\n\r\n                foundHeight += _canvasCells.RowHeight(trialY);\r\n                trialY++;\r\n            }\r\n\r\n            // Visited all cells that we'll need to place the rectangle,\r\n            // and none were occupied. So the space is available here.\r\n\r\n            nbrRequiredCellsHorizontally = trialX - x;\r\n            nbrRequiredCellsVertically = trialY - y;\r\n\r\n            leftOverWidth = (foundWidth - requiredWidth);\r\n            leftOverHeight = (foundHeight - requiredHeight);\r\n\r\n            return true;\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="6391c77d-8d4b-4064-95a5-92eb78a52fe8" Visible="true" Text="DynamicTwoDimensionalArray.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1107</X>
        <Y>-870</Y>
      </Location>
      <Size>
        <Width>246</Width>
        <Height>25</Height>
      </Size>
      <X>1107</X>
      <Y>-870</Y>
      <Width>246</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>DynamicTwoDimensionalArray.cs</ExtraData>
    <Json>{"csharp":"","Code":"// https://www.codeproject.com/Articles/210979/Fast-optimizing-rectangle-packing-algorithm-for-bu\r\nusing System;\r\n\r\nnamespace Mapper\r\n{\r\n    /// &lt;summary&gt;\r\n    /// Implements a two dimensional dynamic array with elements of type T.\r\n    /// &lt;/summary&gt;\r\n    /// &lt;typeparam name=\"T\"&gt;&lt;/typeparam&gt;\r\n    public class DynamicTwoDimensionalArray&lt;T&gt;\r\n    {\r\n        /// &lt;summary&gt;\r\n        /// Describes a row or column\r\n        /// &lt;/summary&gt;\r\n        private struct Dimension\r\n        {\r\n            public short _size;\r\n            public short _index;\r\n\r\n            // The width of a column or the height of a row\r\n            public int Size\r\n            {\r\n                get { return (int)_size; }\r\n                set { _size = (short)value; }\r\n            }\r\n\r\n            // When a row or column is split, the new row is created at the end of the physical array rather than in the middle.\r\n            // That way, there is no need to copy lots of data. But it does mean you need indirection from the logical index\r\n            // to the physical index.\r\n            // This field provides the physical index.\r\n            public int Index\r\n            {\r\n                get { return (int)_index; }\r\n                set { _index = (short)value; }\r\n            }\r\n        }\r\n\r\n        // Describe the rows and columns\r\n        private Dimension[] _columns;\r\n        private Dimension[] _rows;\r\n\r\n        private T[,] _data;\r\n\r\n        // Number of logical columns in the 2 dimensional array\r\n        private int _nbrColumns = 0;\r\n\r\n        // Number of logical rows in the 2 dimensional array\r\n        private int _nbrRows = 0;\r\n\r\n        /// &lt;summary&gt;\r\n        /// Number of columns\r\n        /// &lt;/summary&gt;\r\n        public int NbrColumns { get { return _nbrColumns; } }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Number of rows\r\n        /// &lt;/summary&gt;\r\n        public int NbrRows { get { return _nbrRows; } }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Constructor\r\n        /// &lt;/summary&gt;\r\n        public DynamicTwoDimensionalArray()\r\n        {\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// After you've constructed the array, you need to initialize it.\r\n        /// \r\n        /// This removes any content and creates the first cell - so the array\r\n        /// will have height is 1 and width is 1.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"capacityX\"&gt;\r\n        /// The array will initially have capacity for at least this many columns. \r\n        /// Must be greater than 0.\r\n        /// Set to the expected maximum width of the array or greater.\r\n        /// The array will resize itself if you make this too small, but resizing is expensive.\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"capacityY\"&gt;\r\n        /// The array will initially have capacity for at least this many rows.\r\n        /// Must be greater than 0.\r\n        /// Set to the expected maximum height of the array or greater.\r\n        /// The array will resize itself if you make this too small, but resizing is expensive.\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"firstColumnWidth\"&gt;\r\n        /// Width of the first column.\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"firstRowHeight\"&gt;\r\n        /// Width of the first column.\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"firstCellValue\"&gt;\r\n        /// Width of the first column.\r\n        /// &lt;/param&gt;\r\n        public void Initialize(int capacityX, int capacityY, int firstColumnWidth, int firstRowHeight, T firstCellValue)\r\n        {\r\n            if (capacityX &lt;= 0) { throw new Exception(\"capacityX cannot be 0 or smaller\"); }\r\n            if (capacityY == 0) { throw new Exception(\"capacityY cannot be 0 or smaller\"); }\r\n\r\n            if ((_columns == null) || (_columns.GetLength(0) &lt; capacityX))\r\n            {\r\n                _columns = new Dimension[capacityX];\r\n            }\r\n\r\n            if ((_rows == null) || (_rows.GetLength(0) &lt; capacityY))\r\n            {\r\n                _rows = new Dimension[capacityY];\r\n            }\r\n\r\n            if ((_data == null) || (_data.GetLength(0) &lt; capacityX) || (_data.GetLength(1) &lt; capacityY))\r\n            {\r\n                _data = new T[capacityX, capacityY];\r\n            }\r\n\r\n            _nbrColumns = 1;\r\n            _nbrRows = 1;\r\n\r\n            _columns[0].Index = 0;\r\n            _columns[0].Size = firstColumnWidth;\r\n\r\n            _rows[0].Index = 0;\r\n            _rows[0].Size = firstRowHeight;\r\n\r\n            _data[0, 0] = firstCellValue;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Returns the item at the given location.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"x\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"y\"&gt;&lt;/param&gt;\r\n        /// &lt;returns&gt;&lt;/returns&gt;\r\n        public T Item(int x, int y)\r\n        {\r\n            return _data[_columns[x].Index, _rows[y].Index];\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Sets an item to the given value\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"x\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"y\"&gt;&lt;/param&gt;\r\n        /// &lt;param name=\"value\"&gt;&lt;/param&gt;\r\n        public void SetItem(int x, int y, T value)\r\n        {\r\n            _data[_columns[x].Index, _rows[y].Index] = value;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Inserts a row at location y.\r\n        /// If y equals 2, than all rows at y=3 and higher will now have y=4 and higher.\r\n        /// The new row will have y=3.\r\n        /// The contents of the row at y=2 will be copied to the row at y=3.\r\n        /// \r\n        /// If there is not enough capacity in the array for the additional row,\r\n        /// than the internal data structure will be copied to a structure with twice the size\r\n        /// (this copying is expensive).\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"y\"&gt;\r\n        /// Identifies the row to be split.\r\n        /// &lt;/param&gt;\r\n        /// &lt;param name=\"heightNewRow\"&gt;\r\n        /// The height of the new row (the one at y=3 in the example).\r\n        /// Must be smaller than the current height of the existing row.\r\n        /// \r\n        /// The old row will have height = (old height of old row) - (height of new row). \r\n        /// &lt;/param&gt;\r\n        public void InsertRow(int y, int heightNewRow)\r\n        {\r\n            if (y &gt;= _nbrRows) { throw new Exception(string.Format(\"y is {0} but height is only {1}\", y, _nbrRows)); } \r\n\r\n            // If there are as many phyiscal rows as there are logical rows, we need to get more physical rows before the number\r\n            // of logical rows can be increased.\r\n            if (_data.GetLength(1) == _nbrRows) { IncreaseCapacity(); }\r\n\r\n            // Copy the cells with the given y to a new row after the last used row. The y of the new row equals _nbrRows.\r\n            int physicalY = _rows[y].Index;\r\n            for (int x = 0; x &lt; _nbrColumns; x++)\r\n            {\r\n                _data[x, _nbrRows] = _data[x, physicalY];\r\n            }\r\n\r\n            // Make room in the _rows array by shifting all items that come after the one indexed by y one position to the right.\r\n            // If y is at the end of the array, there is no need to shift anything.\r\n            if (y &lt; (_nbrRows - 1)) { Array.Copy(_rows, y + 1, _rows, y + 2, (_nbrRows - y - 1)); }\r\n\r\n            // Let the freed up element point at the newly copied row \r\n            _rows[y + 1].Index = _nbrRows;\r\n\r\n            // Set the heights of the old and new rows.\r\n            int oldHeight = _rows[y].Size;\r\n            int newHeightExistingRow = oldHeight - heightNewRow;\r\n            _rows[y + 1].Size = heightNewRow;\r\n            _rows[y].Size = newHeightExistingRow;\r\n\r\n            // The logical height of the array has increased by 1.\r\n            _nbrRows++;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Same as InsertRow, but than for columns.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"x\"&gt;&lt;/param&gt;\r\n        public void InsertColumn(int x, int widthNewColumn)\r\n        {\r\n            if (x &gt;= _nbrColumns) { throw new Exception(string.Format(\"x is {0} but width is only {1}\", x, _nbrColumns)); } \r\n\r\n            // If there are as many phyiscal columns as there are logical columns, we need to get more physical columns before the number\r\n            // of logical columns can be increased.\r\n            if (_data.GetLength(0) == _nbrColumns) { IncreaseCapacity(); }\r\n\r\n            // Copy the cells with the given x to a new column after the last used column. The x of the new column equals _nbrColumns.\r\n            int nbrPhysicalRows = _data.GetLength(1);\r\n            int physicalX = _columns[x].Index;\r\n            Array.Copy(_data, physicalX * nbrPhysicalRows, _data, _nbrColumns * nbrPhysicalRows, _nbrRows);\r\n\r\n            // Make room in the _columns array by shifting all items that come after the one indexed by x one position to the right.\r\n            // If x is at the end of the array, there is no need to shift anything.\r\n            if (x &lt; (_nbrColumns - 1)) { Array.Copy(_columns, x + 1, _columns, x + 2, (_nbrColumns - x - 1)); }\r\n\r\n            // Let the freed up element point at the newly copied column \r\n            _columns[x + 1].Index = _nbrColumns;\r\n\r\n            // Set the widths of the old and new columns.\r\n            int oldWidth = _columns[x].Size;\r\n            int newWidthExistingColumn = oldWidth - widthNewColumn;\r\n            _columns[x + 1].Size = widthNewColumn;\r\n            _columns[x].Size = newWidthExistingColumn;\r\n\r\n            // The logical width of the array has increased by 1.\r\n            _nbrColumns++;\r\n\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Returns the width of the column at the given location\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"y\"&gt;&lt;/param&gt;\r\n        /// &lt;returns&gt;&lt;/returns&gt;\r\n        public int ColumnWidth(int x)\r\n        {\r\n            return _columns[x].Size;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Returns the height of the row at the given location\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"y\"&gt;&lt;/param&gt;\r\n        /// &lt;returns&gt;&lt;/returns&gt;\r\n        public int RowHeight(int y)\r\n        {\r\n            return _rows[y].Size;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Doubles the capacity of the internal data structures.\r\n        /// \r\n        /// Creates a new array with double the width and height of the old array.\r\n        /// Copies the element of the old array to the new array.\r\n        /// Then replaces the old array with the new array.\r\n        /// &lt;/summary&gt;\r\n        private void IncreaseCapacity()\r\n        {\r\n            int oldCapacityX = _data.GetLength(0);\r\n            int oldCapacityY = _data.GetLength(1);\r\n\r\n            int newCapacityX = oldCapacityX * 2;\r\n            int newCapacityY = oldCapacityY * 2;\r\n            int nbrItemsToCopy = oldCapacityX * oldCapacityY;\r\n\r\n            T[,] newData = new T[newCapacityX, newCapacityY];\r\n            Array.Copy(_data, newData, nbrItemsToCopy);\r\n\r\n            _data = newData;\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="e3ff1dd4-969a-4850-98d9-18157608b536" Visible="true" Text="USPS&#xD;&#xA;Address&#xD;&#xA;Confirm" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>764</X>
        <Y>432</Y>
      </Location>
      <Size>
        <Width>70</Width>
        <Height>60</Height>
      </Size>
      <X>764</X>
      <Y>432</Y>
      <Width>70</Width>
      <Height>60</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"USPSAddressConfirm","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="" ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="77cf7c01-17fb-46fd-a695-52079f7f1326" Visible="true" Text="USPS&#xD;&#xA;Address&#xD;&#xA;Confirm" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>251</X>
        <Y>463</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>251</X>
      <Y>463</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class USPSAddressConfirm : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_Text))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_USPSAddressResponse resp)\r\n\t\t{\r\n\t\t\tstring confirm = resp.DPVConfirmation==\"Y\" ? \"Address is valid.\" : \"Address is not valid.\";\r\n\t\t\t\r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, \r\n\t\t\tnew ST_Text() \r\n\t\t\t{\r\n\t\t\t\tText = confirm\r\n\t\t\t});\t\t\r\n\t\t}\r\n\t\t\r\n\t\t[Publishes(typeof(ST_Text))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_USPSAddressError resp)\r\n\t\t{\r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, \r\n\t\t\tnew ST_Text() \r\n\t\t\t{\r\n\t\t\t\tText = resp.Description\r\n\t\t\t});\t\t\r\n\t\t\t\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="49b6f928-43c8-421b-81cd-982cd949d0b0" Visible="true" Text="SpeakText" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>696</X>
        <Y>469</Y>
      </Location>
      <Size>
        <Width>70</Width>
        <Height>60</Height>
      </Size>
      <X>696</X>
      <Y>469</Y>
      <Width>70</Width>
      <Height>60</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"SpeakText","agentEnabled":"False"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-44976</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="d1014872-e7cd-4163-853f-239278cddbcf" Visible="true" Text="SpeakText" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>313</X>
        <Y>518</Y>
      </Location>
      <Size>
        <Width>70</Width>
        <Height>60</Height>
      </Size>
      <X>313</X>
      <Y>518</Y>
      <Width>70</Width>
      <Height>60</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System.Speech.Synthesis;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class SpeakText : IReceptor\r\n\t{\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_Text text)\r\n\t\t{\r\n\t\t\t// Synchronize across threads so we don't get simultaneous speaking.\r\n\t\t\tlock(this)\r\n\t\t\t{\r\n\t\t\t\tSpeechSynthesizer synth = new SpeechSynthesizer();\r\n\t\t\t    synth.SetOutputToDefaultAudioDevice();\r\n\t\t\t\tsynth.Speak(text.Text);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="e221c4f5-963d-40f1-baad-cec2db2ff4f2" Visible="true" Text="Show&#xD;&#xA;Image" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>582</X>
        <Y>290</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>582</X>
      <Y>290</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"ShowImage","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="825466fb-8caf-4104-9434-10b946972b87" Visible="true" Text="Show&#xD;&#xA;Image" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>410</X>
        <Y>400</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>410</X>
      <Y>400</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ShowImage : IReceptor\r\n\t{\r\n\t\tprotected List&lt;Form&gt; forms = new List&lt;Form&gt;();\r\n\t\t\r\n\t\t// Use ISemanticType to see all types being published!\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_Image img)\r\n\t\t{\r\n\t\t\tProgram.form.BeginInvoke(()=&gt;\r\n\t\t\t{\r\n\t\t\t\tForm form =new Form();\r\n\t\t\t\tform.ClientSize = new Size(img.Image.Width, img.Image.Height);\r\n\t\t\t\tform.MinimizeBox = false;\r\n\t\t\t\tform.MaximizeBox = false;\r\n\t\t\t\tform.ShowIcon = false;\r\n\t\t\t\tform.ShowInTaskbar = false;\r\n\t\t\t\tform.ControlBox = false;\r\n\t\t\t\tform.FormBorderStyle = FormBorderStyle.FixedSingle;\r\n\t\t\t\tform.Text = img.Caption;\r\n\t\t\t\tform.StartPosition = FormStartPosition.Manual;\r\n\t            PictureBox pb = new PictureBox();\r\n\t            pb.Dock = DockStyle.Fill;\r\n\t            pb.SizeMode = PictureBoxSizeMode.StretchImage;\r\n\t            pb.Image = img.Image;\r\n\t            form.Controls.Add(pb);\r\n\t            form.Show();\r\n\t\t\t\tform.Location = Program.layoutManager.RequestLocation(form.Size.Width, form.Size.Height);\r\n\t            forms.Add(form);\r\n\t        });\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="7c8653cb-a478-4153-9975-d563fbd5e95f" Visible="true" Text="ST_Image" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>764</X>
        <Y>-137</Y>
      </Location>
      <Size>
        <Width>178</Width>
        <Height>32</Height>
      </Size>
      <X>764</X>
      <Y>-137</Y>
      <Width>178</Width>
      <Height>32</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Drawing;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Image : ISemanticType \r\n\t{\r\n\t\tpublic string Caption {get;set;}\r\n\t\tpublic Image Image {get;set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="76207288-a066-4ced-be3d-e14446f2c139" Visible="true" Text="Get&#xD;&#xA;Vehicle&#xD;&#xA;Image" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>581</X>
        <Y>216</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>581</X>
      <Y>216</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"GetVehicleImage","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="0fb39165-bf32-41f3-bfe7-887bf3a78f35" Visible="true" Text="Get&#xD;&#xA;Vehicle&#xD;&#xA;Image" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>408</X>
        <Y>323</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>408</X>
      <Y>323</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Drawing;\r\nusing System.IO;\r\nusing System.Net;\r\n\r\nusing Clifton.Core.Semantics;\r\nusing HtmlAgilityPack;\r\n\r\nnamespace App\r\n{\r\n\tpublic class GetVehicleImage : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_Image))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_Vehicle vehicle)\r\n\t\t{\r\n            HtmlWeb web = new HtmlWeb();\r\n            HtmlAgilityPack.HtmlDocument doc = web.Load(\"https://www.google.com/search?q=\"+String.Join(\"+\", new String[] {vehicle.Year.ToString(), vehicle.Make, vehicle.Model})+\"&amp;tbm=isch\");\r\n            var nodes = doc.DocumentNode.SelectNodes(\"(//*[@id='ires']//img)[1]\");\r\n            var src = nodes[0].Attributes[\"src\"].Value;\r\n            WebClient client = new WebClient();\r\n            client.Headers.Add(\"user-agent\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)\");\r\n            Stream reader = client.OpenRead(src);\r\n\r\n            var bytes = default(byte[]);\r\n            using (var memstream = new MemoryStream())\r\n            {\r\n                reader.CopyTo(memstream);\r\n                bytes = memstream.ToArray();\r\n            }\r\n\r\n            MemoryStream ms = new MemoryStream(bytes);\r\n            var img = System.Drawing.Image.FromStream(ms);\r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, \r\n\t\t\tnew ST_Image \r\n\t\t\t{\r\n\t\t\t\tCaption = vehicle.Year.ToString() + \" \" + vehicle.Make + \" \" + vehicle.Model,\r\n\t\t\t\tImage = img\r\n\t\t\t});            \r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.AssemblyReferenceBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="44671a2f-d53f-40d5-9379-993a6807799e" Visible="true" Text="AssyRef" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1556</X>
        <Y>-386</Y>
      </Location>
      <Size>
        <Width>263</Width>
        <Height>31</Height>
      </Size>
      <X>1556</X>
      <Y>-386</Y>
      <Width>263</Width>
      <Height>31</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>6</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"AssyRef":"HtmlAgilityPack.dll"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-16192</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="5edb7ef1-231b-4eb1-b3c5-5e3976ffb90c" Visible="true" Text="Client&#xD;&#xA;Address" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>702</X>
        <Y>138</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>702</X>
      <Y>138</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"ClientAddress","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="e8ad0380-034f-41df-801c-4c8e138217a3" Visible="true" Text="Client&#xD;&#xA;Address" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>229</X>
        <Y>168</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>229</X>
      <Y>168</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Xml;\r\nusing System.Xml.Linq;\r\nusing System.Xml.XPath;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ClientAddress : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_Address))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_PolicyXml xml)\r\n\t\t{\r\n            var root = XDocument.Parse(xml.Xml);\r\n\t\t\tXElement clientAddr = root.XPathSelectElement(\"Policy/Client/Address\");\r\n\t\t\tstring zip = XmlHelpers.GetAttributeValue(clientAddr, \"ZipCode\");\r\n\t\t\t\r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, \r\n\t\t\tnew ST_Address()\r\n\t\t\t{\r\n\t\t\t\tAddress1 = XmlHelpers.GetAttributeValue(clientAddr, \"Address1\"),\r\n\t\t\t\tAddress2 = XmlHelpers.GetAttributeValue(clientAddr, \"Address2\"),\r\n\t\t\t\tCity = new ST_City() {City = XmlHelpers.GetAttributeValue(clientAddr, \"City\")},\r\n\t\t\t\tState = new ST_State() {State = XmlHelpers.GetAttributeValue(clientAddr, \"State\")},\r\n\t\t\t\tZip = new ST_Zip() \r\n\t\t\t\t{\r\n\t\t\t\t\tZip5 = new ST_Zip5() { Zip5 = zip.LeftOf(\"-\")},\r\n\t\t\t\t\tZip4 = new ST_Zip4() { Zip4 = zip.RightOf(\"-\")}\r\n\t\t\t\t},\r\n\t\t\t}); \r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="82ef9ff3-7fbc-4380-966a-6f0a06a46e2e" Visible="true" Text="Show&#xD;&#xA;Driver" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>638</X>
        <Y>-60</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>638</X>
      <Y>-60</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"ShowDriver","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="2c817ac4-a818-4bbc-a553-8051d8917a11" Visible="true" Text="Show&#xD;&#xA;Driver" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>317</X>
        <Y>244</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>317</X>
      <Y>244</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Data;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ShowDriver : IReceptor\r\n\t{\r\n\t\tprotected Form form;\r\n\t\tprotected DataGridView dgv;\r\n\t\tprotected DataTable dtDrivers;\r\n\t\tprotected DataView dvDrivers;\r\n\t\t\r\n\t\tpublic ShowDriver()\r\n\t\t{\r\n\t\t\tform = Program.layoutManager.RequestForm(600, 150, \"Drivers\", false);\r\n\t\t\tdgv = new DataGridView();\r\n\t\t\tdtDrivers = new DataTable();\r\n\t\t\tdtDrivers.Columns.Add(new DataColumn(\"LastName\", typeof(string)));\r\n\t\t\tdtDrivers.Columns.Add(new DataColumn(\"FirstName\", typeof(string)));\r\n\t\t\tdtDrivers.Columns.Add(new DataColumn(\"DOB\", typeof(DateTime)));\r\n\t\t\tdtDrivers.Columns.Add(new DataColumn(\"Age\", typeof(int)));\r\n\t\t\tdtDrivers.Columns.Add(new DataColumn(\"Gender\", typeof(string)));\r\n\t\t\tdtDrivers.Columns.Add(new DataColumn(\"LicenseNumber\", typeof(string)));\r\n\t\t\tdtDrivers.Columns.Add(new DataColumn(\"LicenseState\", typeof(string)));\r\n\t\t\tdvDrivers = new DataView(dtDrivers);\r\n\t\t\tdgv.Dock = DockStyle.Fill;\r\n\t\t\tdgv.ReadOnly = true;\r\n\t\t\tdgv.RowHeadersVisible = false;\r\n\t\t\tdgv.AllowUserToAddRows = false;\r\n\t\t\tdgv.AllowUserToDeleteRows = false;\r\n\t\t\tdgv.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill; \r\n\t\t\tdgv.DataSource = dvDrivers;\r\n\t\t\tform.Controls.Add(dgv);\r\n\t\t\tform.Show();\r\n\t\t}\r\n\t\t\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_Driver driver)\r\n\t\t{\r\n\t\t\tform.BeginInvoke(()=&gt;\r\n\t\t\t{\r\n\t\t\t\tDataRow row = dtDrivers.NewRow();\r\n\t\t\t\trow[\"LastName\"] = driver.LastName;\r\n\t\t\t\trow[\"FirstName\"] = driver.FirstName;\r\n\t\t\t\trow[\"DOB\"] = driver.DOB.ToString(\"MM/dd/yyyy\");\r\n\t\t\t\trow[\"Age\"] = GetAge(driver.DOB);\r\n\t\t\t\trow[\"Gender\"] = driver.Gender;\r\n\t\t\t\trow[\"LicenseNumber\"] = driver.LicenseNumber;\r\n\t\t\t\trow[\"LicenseState\"] = driver.LicenseState;\r\n\t\t\t\tdtDrivers.Rows.Add(row);\r\n\t\t\t\tApplication.DoEvents();\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t// https://stackoverflow.com/questions/9/calculate-age-in-c-sharp\r\n\t\tprotected int GetAge(DateTime dob)\r\n\t\t{\r\n\t\t\tint inow = int.Parse(DateTime.Now.ToString(\"yyyyMMdd\"));\r\n\t\t\tint idob = int.Parse(dob.ToString(\"yyyyMMdd\"));\r\n\t\t\tint age = (inow - idob) / 10000;\t\t\r\n\t\t\t\r\n\t\t\treturn age;\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="7d3f3570-afaf-4366-932d-e707eb432847" Visible="true" Text="ST_Driver" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>764</X>
        <Y>-176</Y>
      </Location>
      <Size>
        <Width>178</Width>
        <Height>32</Height>
      </Size>
      <X>764</X>
      <Y>-176</Y>
      <Width>178</Width>
      <Height>32</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Driver : ISemanticType \r\n\t{\r\n\t\tpublic bool IsValid\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn \r\n\t\t\t\t\t!String.IsNullOrEmpty(FirstName) &amp;&amp;\r\n\t\t\t\t\t!String.IsNullOrEmpty(LastName) &amp;&amp;\r\n\t\t\t\t\tDOB != default(DateTime) &amp;&amp;\r\n\t\t\t\t\t!String.IsNullOrEmpty(Gender) &amp;&amp;\r\n\t\t\t\t\t!String.IsNullOrEmpty(LicenseNumber) &amp;&amp;\r\n\t\t\t\t\t!String.IsNullOrEmpty(LicenseState);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic string FirstName {get; set;}\r\n\t\tpublic string LastName {get; set;}\r\n\t\tpublic DateTime DOB {get; set;}\r\n\t\tpublic string Gender {get;set;}\r\n\t\tpublic string LicenseNumber {get;set;}\r\n\t\tpublic string LicenseState {get;set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="54ae031a-2355-49d7-8c96-53cc07088c5a" Visible="true" Text="Extract&#xD;&#xA;Drivers" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>580</X>
        <Y>-19</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>580</X>
      <Y>-19</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"ExtractDrivers","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="4bd0e6d8-7f9c-4df5-b28c-2e8121c4e5b9" Visible="true" Text="Extract&#xD;&#xA;Drivers" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>316</X>
        <Y>168</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>316</X>
      <Y>168</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Xml;\r\nusing System.Xml.Linq;\r\nusing System.Xml.XPath;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ExtractDrivers : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_Driver))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_PolicyXml xml)\r\n\t\t{\r\n            var root = XDocument.Parse(xml.Xml);\r\n\t\t\tIEnumerable&lt;XElement&gt; drivers = root.XPathSelectElements(\"Policy/Drivers/Driver\");\r\n\t\t\t\r\n\t\t\tforeach (XElement driver in drivers)\r\n\t\t\t{\r\n                string firstName = XmlHelpers.GetAttributeValue(driver, \"FirstName\");\r\n                string lastName = XmlHelpers.GetAttributeValue(driver, \"LastName\");\r\n                string gender = XmlHelpers.GetAttributeValue(driver, \"Gender\");\r\n                string licenseNumber = XmlHelpers.GetAttributeValue(driver, \"LicenseNumber\");\r\n                string licenseState = XmlHelpers.GetAttributeValue(driver, \"LicenseState\");\r\n                DateTime DOB;\r\n                DateTime.TryParse(XmlHelpers.GetAttributeValue(driver, \"DOB\"), out DOB);\r\n                \r\n\t\t\t\tvar stdriver = new ST_Driver() \r\n\t\t\t\t{\r\n\t\t\t\t\tFirstName = firstName,\r\n\t\t\t\t\tLastName = lastName,\r\n\t\t\t\t\tDOB = DOB,\r\n\t\t\t\t\tGender = gender,\r\n\t\t\t\t\tLicenseNumber = licenseNumber,\r\n\t\t\t\t\tLicenseState = licenseState,\r\n\t\t\t\t};\r\n                \r\n                if (stdriver.IsValid)\r\n                {\r\n\t\t\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, stdriver); \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="b1e36292-1cc0-4714-930b-1db7c7115f1c" Visible="true" Text="LayoutManager.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1307</X>
        <Y>-731</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>1307</X>
      <Y>-731</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>LayoutManager.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System.Collections.Generic;\r\nusing System.Drawing;\r\nusing System.Linq;\r\nusing System.Windows.Forms;\r\n\r\nusing Mapper;\r\n\r\nnamespace App\r\n{\r\n    public class LayoutManager\r\n    {\r\n    \tprotected Canvas canvas;\r\n    \t\r\n    \tpublic LayoutManager()\r\n    \t{\r\n    \t\tcanvas=new Canvas();\r\n    \t\tScreen screen = Screen.PrimaryScreen;\r\n    \t\tcanvas.SetCanvasDimensions(screen.WorkingArea.Width, screen.WorkingArea.Height);\r\n    \t}\r\n    \t\r\n    \tpublic Form RequestForm(int w, int h, string caption, bool preferVertical = true)\r\n    \t{\r\n    \t\tScreen screen = Screen.PrimaryScreen;\r\n    \t\tProgram.Log(screen.WorkingArea.Width.ToString() + \", \" + screen.WorkingArea.Height.ToString());\r\n    \t\r\n\t\t\tForm form = new Form();\r\n\t\t\tvar rect = RequestRegion(w, h, preferVertical);\r\n\t\t\tform.Location = rect.Location;\r\n\t\t\tform.Size = rect.Size;\r\n\t\t\tform.StartPosition = FormStartPosition.Manual;\r\n\t\t\tform.Text = caption;\r\n\t\t\t\r\n\t\t\treturn form;\r\n    \t}\r\n    \t\r\n    \tpublic Form RequestFormClientSize(int w, int h, string caption, bool preferVertical = true)\r\n    \t{\r\n    \t\tlock(this)\r\n    \t\t{\r\n\t    \t\t// An estimate only.\r\n\t    \t\tSize borderSize = SystemInformation.BorderSize;\r\n\t\t\t\tForm form = new Form();\r\n\t\t\t\tvar rect = RequestRegion(w, h, preferVertical);\r\n\t\t\t\tform.Location = rect.Location;\r\n\t\t\t\tform.ClientSize = rect.Size;\r\n\t\t\t\tform.StartPosition = FormStartPosition.Manual;\r\n\t\t\t\tform.Text = caption;\r\n\t\t\t\t\r\n\t\t\t\treturn form;\r\n\t\t\t}\r\n    \t}\r\n    \t\r\n    \tpublic Point RequestLocation(int w, int h, bool preferVertical = true)\r\n    \t{\r\n    \t\tRectangle r = RequestRegion(w, h, preferVertical);\r\n    \t\t\r\n    \t\treturn r.Location;\r\n    \t}\r\n    \t\r\n    \t// Returns a region where the requested box of width and height can fit on the screen.\r\n    \tprotected Rectangle RequestRegion(int w, int h, bool preferVertical = true)\r\n    \t{\r\n            int x;\r\n            int y;\r\n            canvas.AddRectangle(w, h, out x, out y, preferVertical);\r\n            Rectangle rect = new Rectangle(x, y, w, h);\r\n            \r\n            return rect;\r\n    \t}\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="a5d0f4d8-94f9-4c12-a896-7418da6ee004" Visible="true" Text="Show&#xD;&#xA;Vehicle" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>579</X>
        <Y>140</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>579</X>
      <Y>140</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"ShowVehicle","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="18721cda-4fde-43c1-b27d-feb2271509ce" Visible="true" Text="Show&#xD;&#xA;Vehicle" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>406</X>
        <Y>244</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>406</X>
      <Y>244</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Data;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ShowVehicle : IReceptor\r\n\t{\r\n\t\tprotected Form form;\r\n\t\tprotected DataGridView dgv;\r\n\t\tprotected DataTable dtVehicles;\r\n\t\tprotected DataView dvVehicles;\r\n\t\t\r\n\t\tpublic ShowVehicle()\r\n\t\t{\r\n\t\t\tform = Program.layoutManager.RequestForm(400, 200, \"Vehicles\", false);\r\n\t\t\tdgv = new DataGridView();\r\n\t\t\tdtVehicles = new DataTable();\r\n\t\t\tdtVehicles.Columns.Add(new DataColumn(\"Make\", typeof(string)));\r\n\t\t\tdtVehicles.Columns.Add(new DataColumn(\"Model\", typeof(string)));\r\n\t\t\tdtVehicles.Columns.Add(new DataColumn(\"Year\", typeof(int)));\r\n\t\t\tdvVehicles = new DataView(dtVehicles);\r\n\t\t\tdgv.Dock = DockStyle.Fill;\r\n\t\t\tdgv.ReadOnly = true;\r\n\t\t\tdgv.RowHeadersVisible = false;\r\n\t\t\tdgv.AllowUserToAddRows = false;\r\n\t\t\tdgv.AllowUserToDeleteRows = false;\r\n\t\t\tdgv.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill; \r\n\t\t\tdgv.DataSource = dvVehicles;\r\n\t\t\tform.Controls.Add(dgv);\r\n\t\t\tform.Show();\r\n\t\t}\r\n\t\t\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_Vehicle vehicle)\r\n\t\t{\r\n\t\t\tform.BeginInvoke(()=&gt;\r\n\t\t\t{\r\n\t\t\t\tDataRow row = dtVehicles.NewRow();\r\n\t\t\t\trow[\"Make\"] = vehicle.Make;\r\n\t\t\t\trow[\"Model\"] = vehicle.Model;\r\n\t\t\t\trow[\"Year\"] = vehicle.Year;\r\n\t\t\t\tdtVehicles.Rows.Add(row);\r\n\t\t\t\tApplication.DoEvents();\r\n\t\t\t});\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="d4f2e60a-f99a-4b94-8739-24841d1ba597" Visible="true" Text="XmlHelpers.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>856</X>
        <Y>-806</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>856</X>
      <Y>-806</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>XmlHelpers.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Xml.Linq;\r\nusing System.Xml.XPath;\r\n\r\nnamespace App\r\n{\r\n    public static class XmlHelpers\r\n    {\r\n        public static string GetValue(XElement element, string elementName)\r\n        {\r\n            return element.Element(elementName).Value;\r\n        }\r\n        \r\n        public static string GetAttributeValue(XElement element, string attrName)\r\n        {\r\n        \treturn element.Attribute(attrName).Value;\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="ee3ef859-2934-44ed-8ad3-f329b5a8368d" Visible="true" Text="ST_Vehicle" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>764</X>
        <Y>-219</Y>
      </Location>
      <Size>
        <Width>178</Width>
        <Height>32</Height>
      </Size>
      <X>764</X>
      <Y>-219</Y>
      <Width>178</Width>
      <Height>32</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Vehicle : ISemanticType \r\n\t{\r\n\t\tpublic bool IsValid\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn \r\n\t\t\t\t\t!String.IsNullOrEmpty(Make) &amp;&amp;\r\n\t\t\t\t\t!String.IsNullOrEmpty(Model) &amp;&amp;\r\n\t\t\t\t\tYear != 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic string Make {get; set;} \r\n\t\tpublic string Model {get; set;}\r\n\t\tpublic int Year {get; set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="b5157bd4-8acc-4da6-8f01-68a6183ba2ec" Visible="true" Text="Extract&#xD;&#xA;Vehicles" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>582</X>
        <Y>64</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>582</X>
      <Y>64</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"ExtractVehicles","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="d75506ec-01d5-4b03-b31e-7ffec41f068f" Visible="true" Text="Extract&#xD;&#xA;Vehicles" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>405</X>
        <Y>168</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>405</X>
      <Y>168</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Xml;\r\nusing System.Xml.Linq;\r\nusing System.Xml.XPath;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ExtractVehicles : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_Vehicle))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_PolicyXml xml)\r\n\t\t{\r\n            var root = XDocument.Parse(xml.Xml);\r\n\t\t\tIEnumerable&lt;XElement&gt; vehicles = root.XPathSelectElements(\"Policy/Vehicles/Vehicle\");\r\n\t\t\t\r\n\t\t\tforeach (XElement vehicle in vehicles)\r\n\t\t\t{\r\n                string make = XmlHelpers.GetAttributeValue(vehicle, \"Make\");\r\n                string model = XmlHelpers.GetAttributeValue(vehicle, \"Model\");\r\n                int year;\r\n                Int32.TryParse(XmlHelpers.GetAttributeValue(vehicle, \"Year\"), out year);\r\n                \r\n\t\t\t\tvar stvehicle = new ST_Vehicle() \r\n\t\t\t\t{\r\n\t\t\t\t\tMake = make,\r\n\t\t\t\t\tModel = model,\r\n\t\t\t\t\tYear = year,\r\n\t\t\t\t};\r\n                \r\n                if (stvehicle.IsValid)\r\n                {\r\n\t\t\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, stvehicle); \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="221984c6-0746-4dba-956e-d7d6c02692d3" Visible="true" Text="ST_Xml" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>764</X>
        <Y>-274</Y>
      </Location>
      <Size>
        <Width>178</Width>
        <Height>32</Height>
      </Size>
      <X>764</X>
      <Y>-274</Y>
      <Width>178</Width>
      <Height>32</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Xml : ISemanticType \r\n\t{\r\n\t\tpublic string Xml {get; set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="55069e86-4ad4-4f1c-9a16-57e67ee14e5b" Visible="true" Text="Load Policy&#xD;&#xA;From File" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>522</X>
        <Y>24</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>522</X>
      <Y>24</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"LoadPolicyFromFile","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="6ec4e421-ab86-4d26-8fc3-9387a391ce94" Visible="true" Text="Load Policy &#xD;&#xA;From File" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>405</X>
        <Y>26</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>405</X>
      <Y>26</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.IO;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class LoadPolicyFromFile : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_PolicyXml))]\r\n\t\t[Publishes(typeof(ST_Xml))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_PolicyXmlPath xmlPath)\r\n\t\t{\r\n\t\t\tstring xml = File.ReadAllText(xmlPath.FilePath);\r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, new ST_PolicyXml() {Xml = xml});\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="266a93f9-eb06-426d-9ba0-d15dba8ecdac" Visible="true" Text="ST_PolicyXml" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>765</X>
        <Y>-313</Y>
      </Location>
      <Size>
        <Width>178</Width>
        <Height>32</Height>
      </Size>
      <X>765</X>
      <Y>-313</Y>
      <Width>178</Width>
      <Height>32</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_PolicyXml : ST_Xml { } \r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="05de2bcf-c1cd-474b-8ec7-9b91b0b6c1b6" Visible="true" Text="ST_PolicyXmlPath" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>878</X>
        <Y>153</Y>
      </Location>
      <Size>
        <Width>178</Width>
        <Height>32</Height>
      </Size>
      <X>878</X>
      <Y>153</Y>
      <Width>178</Width>
      <Height>32</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>3</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.ComponentModel;\r\nusing System.Drawing.Design;\r\nusing System.Windows.Forms.Design;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_PolicyXmlPath : ISemanticType \r\n\t{\r\n\t\t[EditorAttribute(typeof(FileNameEditor), typeof(UITypeEditor))]\r\n\t\tpublic string FilePath {get; set;}\r\n\t\t\r\n\t\tpublic ST_PolicyXmlPath()\r\n\t\t{\r\n\t\t\tFilePath = \"HopeTestPolicy.xml\";\r\n\t\t}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="26983416-8daa-4f6e-9353-79a708a38941" Visible="true" Text="Constants.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>857</X>
        <Y>-773</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>857</X>
      <Y>-773</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>Constants.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace App\r\n{\r\n    public class Constants\r\n    {\r\n   \t\tpublic const string USER_ID = \"457INTER2602\";\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="a8eb889b-9a82-40bc-a701-ab1554f9e413" Visible="true" Text="ReceptorDescription.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1112</X>
        <Y>-749</Y>
      </Location>
      <Size>
        <Width>170</Width>
        <Height>25</Height>
      </Size>
      <X>1112</X>
      <Y>-749</Y>
      <Width>170</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>ReceptorDescription.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System.Collections.Generic;\r\n\r\nnamespace App\r\n{\r\n    public class ReceptorDescription\r\n    {\r\n        /// &lt;summary&gt;\r\n        /// The type name of the receptor class that receives the ReceptorSemanticType and optionally publishes other types.\r\n        /// &lt;/summary&gt;\r\n        public string ReceptorTypeName { get; set; }\r\n\r\n        /// &lt;summary&gt;\r\n        /// The semantic type that the receptor Process method receives.\r\n        /// &lt;/summary&gt;\r\n        public string ReceivingSemanticType { get; set; }\r\n\r\n        /// &lt;summary&gt;\r\n        /// The types that the receptor Process method publishes.\r\n        /// &lt;/summary&gt;\r\n        public List&lt;string&gt; Publishes { get; set; }\r\n\r\n        public ReceptorDescription()\r\n        {\r\n            Publishes = new List&lt;string&gt;();\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_USPSAddressResponse" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="83b153ac-b76e-4c8a-9e69-89cf7147870c" Visible="true" Text="ST_USPSAddressError" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>763</X>
        <Y>-444</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>763</X>
      <Y>-444</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n    public class ST_USPSAddressError : ISemanticType\r\n    {\r\n\t\tpublic int Number {get;set;}\r\n\t\tpublic string Source {get;set;}\r\n\t\tpublic string Description {get;set;}\r\n\t\tpublic string HelpFile {get;set;}\r\n\t\tpublic string HelpContext {get;set;}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_HttpGet" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="9dfcc25e-50c8-482a-8609-df23ff651faa" Visible="true" Text="ST_ShowSemanticType" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>958</X>
        <Y>-567</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>958</X>
      <Y>-567</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n    public class ST_ShowSemanticType : ISemanticType\r\n    {\r\n    \tpublic ISemanticType Type {get; set;}\r\n    }\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="b070c101-e46e-4bbe-83de-5bb541d7606e" Visible="true" Text="Show&#xD;&#xA;Semantic&#xD;&#xA;Type" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>843</X>
        <Y>466</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>843</X>
      <Y>466</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"ShowSemanticType","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="49c9ba4c-7858-4653-aa20-b6c1b034274f" Visible="true" Text="Show&#xD;&#xA;Semantic&#xD;&#xA;Type" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>156</X>
        <Y>534</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>156</X>
      <Y>534</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Drawing;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ShowSemanticType : IReceptor\r\n\t{\r\n\t\tprotected Form form;\r\n\t\tprotected PropertyGrid pg;\r\n\t\t\r\n\t\tpublic ShowSemanticType()\r\n\t\t{\r\n\t\t\tform = Program.layoutManager.RequestForm(400, 500, \"Semantic Type Viewer\", false);\r\n\t\t\tpg = new PropertyGrid();\r\n\t\t\tpg.Dock = DockStyle.Fill;\r\n\t\t\tform.Controls.Add(pg);\r\n\t\t\tform.Show();\r\n\t\t}\r\n\t\t\r\n\t\t// Use ISemanticType to see all types being published!\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_ShowSemanticType st)\r\n\t\t{\r\n\t\t\tform.BeginInvoke(()=&gt;\r\n\t\t\t{\r\n\t\t\t\tpg.SelectedObject = st.Type;\r\n\t\t\t\tApplication.DoEvents();\r\n\t\t\t});\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="USPSValidationResponse" ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="7887a6c5-4dbb-4977-b186-e171b84b0a20" Visible="true" Text="USPS&#xD;&#xA;Validation&#xD;&#xA;Response" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>843</X>
        <Y>393</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>843</X>
      <Y>393</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"USPSValidationResponse","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="" ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="f84d4613-7e50-41ea-a2a4-0aeb697e540c" Visible="true" Text="USPS&#xD;&#xA;Validation&#xD;&#xA;Response" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>154</X>
        <Y>461</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>154</X>
      <Y>461</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class USPSValidationResponse : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_ShowSemanticType))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_USPSAddressResponse resp)\r\n\t\t{\r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, new ST_ShowSemanticType() {Type = resp});\t\t\r\n\t\t}\r\n\t\t\r\n\t\t[Publishes(typeof(ST_ShowSemanticType))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_USPSAddressError resp)\r\n\t\t{\r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, new ST_ShowSemanticType() {Type = resp});\t\t\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="USPSValidationRequest" ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="bfe9d5ff-46de-4283-93d1-a63bfeb5bc7d" Visible="true" Text="USPS&#xD;&#xA;Validation&#xD;&#xA;Request" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>843</X>
        <Y>319</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>843</X>
      <Y>319</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"USPSValidationRequest","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="74fc9da4-fd93-4d5e-8068-df8ee373bcf4" Visible="true" Text="AddressValidateResponse.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>861</X>
        <Y>-670</Y>
      </Location>
      <Size>
        <Width>242</Width>
        <Height>25</Height>
      </Size>
      <X>861</X>
      <Y>-670</Y>
      <Width>242</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>AddressValidateResponse.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace App\r\n{\r\n    public class AddressValidateResponse\r\n    {\r\n\t\tpublic ST_USPSAddressResponse Address { get; set; }    \r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="" ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="e04a8192-33a3-40df-8baf-ed97ead36548" Visible="true" Text="USPS&#xD;&#xA;Validation&#xD;&#xA;Request" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>153</X>
        <Y>388</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>153</X>
      <Y>388</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class USPSValidationRequest : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_USPSAddressError))]\r\n\t\t[Publishes(typeof(ST_USPSAddressResponse))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_ValidateAddressXml xml)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t            string ret = Http.Get(\"https://secure.shippingapis.com/ShippingAPI.dll?API=Verify&amp;XML=\" + xml.Xml);\r\n\t\r\n\t\t\t\t// For debugging, show ST.\r\n\t            // proc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, new ST_Text() {Text = ret});\r\n\t            \r\n\t            XmlSerializer xs = new XmlSerializer(typeof(AddressValidateResponse));\r\n\t            StringReader sr = new StringReader(ret);\r\n\t            AddressValidateResponse resp = (AddressValidateResponse)xs.Deserialize(sr);\r\n\t            \r\n\t            if (resp.Address.Error != null)\r\n\t            {\r\n\t\t\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, resp.Address.Error);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// USPS reverses the two address lines.\r\n\t\t\t\t\tstring a1 = resp.Address.Address1;\r\n\t\t\t\t\tstring a2 = resp.Address.Address2;\r\n\t\t\t\t\tresp.Address.Address2 = a1;\r\n\t\t\t\t\tresp.Address.Address1 = a2;\r\n\t\t\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, resp.Address);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tSystem.Windows.Forms.MessageBox.Show(ex.Message, \"Error\");\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="XmlSerialization" ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="9458ad9d-7a46-4b1c-b2ed-c9bf151dc80c" Visible="true" Text="Avr&#xD;&#xA;Serialization" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>841</X>
        <Y>246</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>841</X>
      <Y>246</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"AvrSerialization","agentEnabled":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="a212b4e3-9db4-4a85-88d8-c410eb918285" Visible="true" Text="AddressValidationRequest.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>860</X>
        <Y>-706</Y>
      </Location>
      <Size>
        <Width>221</Width>
        <Height>25</Height>
      </Size>
      <X>860</X>
      <Y>-706</Y>
      <Width>221</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>AddressValidationRequest.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace App\r\n{\r\n    public class AddressValidateRequest\r\n    {\r\n        [XmlAttribute] public string USERID { get; set; }\r\n        public int Revision { get; set; }\r\n        public Address Address { get; set; }\r\n\r\n        public AddressValidateRequest()\r\n        {\r\n            USERID = Constants.USER_ID;\r\n            Revision = 1;\r\n            Address = new Address();\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="576ccacc-587e-4858-b13d-eceefc778c51" Visible="true" Text="Address.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>859</X>
        <Y>-737</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>859</X>
      <Y>-737</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>Address.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nnamespace App\r\n{\r\n    public class Address\r\n    {\r\n        [XmlAttribute] public int ID { get; set; }\r\n        public string FirmName { get; set; }\r\n        public string Address1 { get; set; }\r\n        public string Address2 { get; set; }\r\n        public string City { get; set; }\r\n        public string State { get; set; }\r\n        public string Urbanization { get; set; }\r\n        public string Zip5 { get; set; }\r\n        public string Zip4 { get; set; }\r\n\r\n        public Address()\r\n        {\r\n            ID = 0;         // Only 1 address\r\n            // These elements must be serialized even if not populated.\r\n            Address1 = \"\";\r\n            Zip4 = \"\";\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="" ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="5913c1d0-9918-408c-bc1b-b4aace5c190e" Visible="true" Text="Avr&#xD;&#xA;Serialization" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>152</X>
        <Y>314</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>152</X>
      <Y>314</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class AvrSerialization : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_ValidateAddressXml))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_USPSAddressValidateRequest avr)\r\n\t\t{\r\n            XmlWriterSettings xws = new XmlWriterSettings();\r\n            xws.OmitXmlDeclaration = true;\r\n            XmlSerializerNamespaces ns = new XmlSerializerNamespaces();\r\n            ns.Add(\"\", \"\");\r\n            XmlSerializer xs = new XmlSerializer(avr.Request.GetType());\r\n            StringBuilder sb = new StringBuilder();\r\n            TextWriter tw = new StringWriter(sb);\r\n            XmlWriter xtw = XmlWriter.Create(tw, xws);\r\n            xs.Serialize(xtw, avr.Request, ns);\r\n            string xml = sb.ToString();\r\n            \r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, new ST_ValidateAddressXml() {Xml = xml});            \r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_USPSAddressResponse" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="747093bc-3257-41de-9443-b6764fda8914" Visible="true" Text="ST_USPSAddressResponse" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>762</X>
        <Y>-487</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>762</X>
      <Y>-487</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n    public class ST_USPSAddressResponse : ISemanticType\r\n    {\r\n        public int ID { get; set; }\r\n        public string FirmName { get; set; }\r\n        public string Address1 { get; set; }\r\n        public string Address2 { get; set; }\r\n        public string City { get; set; }\r\n        public string State { get; set; }\r\n        public string Urbanization { get; set; }\r\n        public string Zip5 { get; set; }\r\n        public string Zip4 { get; set; }\r\n        public string DeliveryPoint { get; set; }\r\n        public string CarrierRoute { get; set; }\r\n        public string DPVConfirmation { get; set; }\r\n        public string DPVCMRA { get; set; }\r\n        public string DPVFootnotes { get; set; }\r\n        public string Business { get; set; }\r\n        public string CentralDeliveryPoint { get; set; }\r\n        public string Vacant { get; set; }\r\n\t\tpublic ST_USPSAddressError Error { get; set; }        \r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_Xml" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="4b4ea0db-7e18-4597-b7dd-3c1e2a59f7f3" Visible="true" Text="ST_ValidateAddressXml" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>760</X>
        <Y>-527</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>760</X>
      <Y>-527</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n    public class ST_ValidateAddressXml : ISemanticType\r\n    {\r\n        public string Xml { get; set; }\r\n    }\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="5bce668a-4556-4631-9593-eb97d3a3530a" Visible="true" Text="ST_USPSAddressValidateRequest" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>759</X>
        <Y>-565</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>759</X>
      <Y>-565</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n    public class ST_USPSAddressValidateRequest : ISemanticType\r\n    {\r\n        public AddressValidateRequest Request {get; set;}\r\n    }\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="733772f5-7ae5-48e5-be42-775a3f9ceb28" Visible="true" Text="USPS&#xD;&#xA;Address&#xD;&#xA;Verifier" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>784</X>
        <Y>205</Y>
      </Location>
      <Size>
        <Width>83</Width>
        <Height>70</Height>
      </Size>
      <X>784</X>
      <Y>205</Y>
      <Width>83</Width>
      <Height>70</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"USPSAddressVerifier","agentEnabled":"False"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-44976</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentReceptorShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="b3c28b6c-e6ed-4ebf-bfa6-fd67a61e47af" Visible="true" Text="ShowText" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="false" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>586</X>
        <Y>470</Y>
      </Location>
      <Size>
        <Width>66</Width>
        <Height>60</Height>
      </Size>
      <X>586</X>
      <Y>470</Y>
      <Width>66</Width>
      <Height>60</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"agentName":"ShowText","agentEnabled":"False"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-44976</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="b3c2a75e-c52c-4007-b139-70999dd63ee2" Visible="true" Text="ST_Text" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>961</X>
        <Y>-263</Y>
      </Location>
      <Size>
        <Width>178</Width>
        <Height>32</Height>
      </Size>
      <X>961</X>
      <Y>-263</Y>
      <Width>178</Width>
      <Height>32</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Text : ISemanticType \r\n\t{\r\n\t\tpublic string Text {get; set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="45d3705a-be3f-42a6-b689-d99055bae95f" Visible="true" Text="ShowText" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>270</X>
        <Y>-219</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>270</X>
      <Y>-219</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ShowText : IReceptor\r\n\t{\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_Text text)\r\n\t\t{\r\n\t\t\tMessageBox.Show(text.Text, \"Output\", MessageBoxButtons.OK, MessageBoxIcon.Information);\r\n\t\t}\r\n\t\t\r\n\t\t// public void Process(ISemanticProcessor proc, IMembrane membrane, ST_Xml xml)\r\n\t\t// {\r\n\t\t//\tMessageBox.Show(xml.Xml, \"Output\", MessageBoxButtons.OK, MessageBoxIcon.Information);\r\n\t\t// }\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="4d3c80e1-6778-453a-9607-010adb61fbdc" Visible="true" Text="PropertyContainer.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1113</X>
        <Y>-710</Y>
      </Location>
      <Size>
        <Width>161</Width>
        <Height>25</Height>
      </Size>
      <X>1113</X>
      <Y>-710</Y>
      <Width>161</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>RouteHandlers.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System.Collections.Generic;\r\n\r\nnamespace App\r\n{\r\n    public class PropertyContainer\r\n    {\r\n        public List&lt;PropertyData&gt; Types { get; set; }\r\n\r\n        public PropertyContainer()\r\n        {\r\n            Types = new List&lt;PropertyData&gt;();\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="e4e3ffcb-ef55-48c8-bb03-b6b3a7976c62" Visible="true" Text="PropertyData.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1126</X>
        <Y>-669</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>1126</X>
      <Y>-669</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>RouteHandlers.cs</ExtraData>
    <Json>{"csharp":"","Code":"namespace App\r\n{\r\n    public class PropertyData\r\n    {\r\n        public string Category { get; set; }\r\n        public string Description { get; set; }\r\n        public string Name { get; set; }\r\n        public string TypeName { get; set; }\r\n        public string Value { get; set; }\r\n        public PropertyContainer ChildType { get; set; }\r\n\r\n        public PropertyData()\r\n        {\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="539ef7c2-73a1-4386-8241-aa6549378f68" Visible="true" Text="RouteHandlers.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1311</X>
        <Y>-664</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>1311</X>
      <Y>-664</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>RouteHandlers.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Reflection;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\nusing Clifton.Core.Semantics;\r\nusing Clifton.Core.Services.SemanticProcessorService;\r\n\r\nnamespace App\r\n{\r\n\tpublic class RouteHandlers : BaseRouteHandlers\r\n\t{\r\n\t\tprotected const string INSTANTIATE_RECEPTOR = \"instantiateReceptor\";\r\n\t\tprotected const string DESCRIBE_RECEPTOR = \"describeReceptor\";\r\n\t\tprotected const string DESCRIBE_SEMANTIC_TYPE = \"describeSemanticType\";\r\n\t\tprotected const string INSTANTIATE_SEMANTIC_TYPE = \"instantiateSemanticType\";\r\n\t\tprotected const string PUBLISH_SEMANTIC_TYPE = \"publishSemanticType\";\r\n\t\tprotected const string ENABLE_DISABLE_RECEPTOR = \"enableDisableReceptor\";\r\n        protected const string CLOSE = \"close\";\r\n\r\n\t\tprotected SemanticProcessor sp;\r\n\t\tprotected string assyName;\r\n\t\t\r\n\t\t// TODO: Membrane needs to be added to the type name as well.\r\n\t\tprotected Dictionary&lt;string, IReceptor&gt; receptors = new Dictionary&lt;string, IReceptor&gt;();\r\n\r\n\t\tpublic RouteHandlers(SemanticProcessor sp)\r\n\t\t{\r\n\t\t\troutes = new Dictionary&lt;string, Func&lt;HttpListenerContext, string, HandlerResponse&gt;&gt;()\r\n\t\t\t{\r\n\t\t\t\t{INSTANTIATE_RECEPTOR, InstantiateReceptor},\r\n\t\t\t\t{DESCRIBE_RECEPTOR, DescribeReceptor },\r\n\t\t\t\t{DESCRIBE_SEMANTIC_TYPE, DescribeSemanticType },\r\n\t\t\t\t{INSTANTIATE_SEMANTIC_TYPE, InstantiateSemanticType },\r\n\t\t\t\t{PUBLISH_SEMANTIC_TYPE, PublishSemanticType },\r\n\t\t\t\t{ENABLE_DISABLE_RECEPTOR, EnableDisableReceptor },\r\n\t\t\t\t{CLOSE, Close },\r\n\t\t\t};\r\n\r\n\t\t\tthis.sp = sp;\r\n\t\t\tassyName = Process.GetCurrentProcess().ProcessName;\r\n\t\t}\r\n\r\n\t\tprotected HandlerResponse InstantiateReceptor(HttpListenerContext context, string data)\r\n\t\t{\r\n\t\t\tstring typeName = data.RightOf('=');\r\n\t\t\tInstantiateReceptor(typeName);\r\n\t\t\t\r\n\t\t\treturn new HandlerResponse(\"OK\", \"text/text\");\r\n\t\t}\r\n\t\t\r\n\t\tprotected HandlerResponse DescribeReceptor(HttpListenerContext context, string data)\r\n\t\t{\r\n\t\t\tstring typeName = data.RightOf('=');\r\n\t\t\tList&lt;ReceptorDescription&gt; processMethods = new List&lt;ReceptorDescription&gt;();\r\n\t\t\tType rtype = Type.GetType(typeName + \", \" + assyName);\r\n\t\t\tvar mis = rtype.GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(m =&gt; m.Name == \"Process\");\t\t\t\r\n\t\t\t\r\n\t\t\tmis.ForEach(mi=&gt;\r\n\t\t\t{\r\n\t\t\t\tReceptorDescription descr = new ReceptorDescription();\r\n                descr.ReceptorTypeName = typeName;\r\n                descr.ReceivingSemanticType =  mi.GetParameters()[2].ParameterType.Name;\r\n\t\t\t\tvar attrs = mi.GetCustomAttributes().Where(attr=&gt;attr is PublishesAttribute).Cast&lt;PublishesAttribute&gt;();\r\n\t\t\t\t\r\n\t\t\t\tforeach(var attr in attrs)\r\n\t\t\t\t{\r\n\t\t\t\t\tdescr.Publishes.Add(attr.PublishesType.Name);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tprocessMethods.Add(descr);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tstring json = JsonConvert.SerializeObject(processMethods);\r\n\t\t\t\r\n\t\t\treturn new HandlerResponse(json, \"text/json\");\r\n\t\t}\r\n\r\n\t\tprotected HandlerResponse DescribeSemanticType(HttpListenerContext context, string data)\r\n\t\t{\r\n            try\r\n            {\r\n\t\t\t\tType t = Type.GetType(\"App.\" + data.RightOf('=') + \", \" + assyName);\r\n\t\t\t\t\r\n\t\t\t\t// Instantiate the object so we can get any default values.\r\n\t\t\t\tobject obj = Activator.CreateInstance(t);\r\n\t\t\t\t\r\n            \tPropertyInfo[] pis = t.GetProperties(BindingFlags.Public | BindingFlags.Instance);\r\n            \tPropertyContainer pc = new PropertyContainer();\r\n                BuildTypes(obj, pc, pis);\r\n\t            string json = JsonConvert.SerializeObject(pc);\r\n\r\n\t\t\t\treturn new HandlerResponse(json, \"text/json\");\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t            Program.Log(ex.Message+\"\\r\\n\"+ex.StackTrace);\r\n\t\t\t\treturn new HandlerResponse(\"Error: \" + ex.Message, \"text/text\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprotected HandlerResponse InstantiateSemanticType(HttpListenerContext context, string data)\r\n\t\t{\r\n\t\t\tType t = Type.GetType(\"App.\" + data.RightOf('=') + \", \" + assyName);\r\n\t\t\tISemanticType st = (ISemanticType)Activator.CreateInstance(t);\r\n\t\t\tstring json = JsonConvert.SerializeObject(st);\r\n\r\n\t\t\treturn new HandlerResponse(json, \"text/json\");\r\n\t\t}\r\n\r\n\t\tprotected HandlerResponse PublishSemanticType(HttpListenerContext context, string data)\r\n\t\t{\r\n\t\t\t// TODO: Fix assumptions about ordering of params\r\n\t\t\tstring[] parms = data.Split('&amp;');\r\n\t\t\tType t = Type.GetType(\"App.\" + parms[0].RightOf('=') + \", \" + assyName);\r\n\t\t\tISemanticType st = (ISemanticType)JsonConvert.DeserializeObject(parms[1].RightOf('='), t);\r\n\t\t\tsp.ProcessInstance&lt;App.HopeMembrane&gt;(st);\r\n\r\n\t\t\treturn new HandlerResponse(\"OK\", \"text/text\");\r\n\t\t}\r\n\r\n\t\tprotected HandlerResponse EnableDisableReceptor(HttpListenerContext context, string data)\r\n\t\t{\r\n\t\t\t// TODO: Fix assumptions about ordering of params\r\n\t\t\tstring[] parms = data.Split('&amp;');\r\n\t\t\tstring typeName = \"App.\" + parms[0].RightOf('=');\r\n\r\n\t\t\tif (parms[1].RightOf('=').to_b())\r\n\t\t\t{\r\n\t\t\t\t// enable\r\n\t\t\t\tif (!receptors.ContainsKey(typeName))\r\n\t\t\t\t{\r\n\t\t\t\t\tInstantiateReceptor(typeName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// disable\r\n\t\t\t\tIReceptor receptor;\r\n\r\n\t\t\t\tif (receptors.TryGetValue(typeName, out receptor))\r\n\t\t\t\t{\r\n\t\t\t\t\tsp.Unregister&lt;App.HopeMembrane&gt;(receptor);\r\n\t\t\t\t\treceptors.Remove(typeName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn new HandlerResponse(\"OK\", \"text/text\");\r\n\t\t}\r\n\t\t\r\n\t\tprotected HandlerResponse Close(HttpListenerContext context, string data)\r\n\t\t{\r\n\t\t\tProgram.Close();\r\n\t\t\t\r\n\t\t\treturn new HandlerResponse(\"OK\", \"text/text\");\r\n\t\t}\r\n\r\n\t\tprotected void InstantiateReceptor(string typeName)\r\n\t\t{\r\n\t\t\tProgram.form.Invoke(() =&gt;\r\n\t\t\t{\r\n\t\t\t\tType t = Type.GetType(typeName + \", \" + assyName);\r\n\t\t\t\tIReceptor receptor = (IReceptor)Activator.CreateInstance(t);\r\n\t\t\t\tsp.Register&lt;App.HopeMembrane&gt;(receptor);\r\n\t\t\t\treceptors[typeName] = receptor;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n        protected void BuildTypes(object obj, PropertyContainer pc, PropertyInfo[] pis)\r\n        {\r\n            foreach (PropertyInfo pi in pis)\r\n            {\r\n                PropertyData pd = new PropertyData() { Name = pi.Name, TypeName = pi.PropertyType.FullName };\r\n\r\n\t\t\t\tif (obj != null)\r\n\t\t\t\t{\r\n\t                if ((pi.PropertyType.IsValueType) || (pd.TypeName == \"System.String\"))\r\n\t                {\r\n\t\t\t\t\t\t// We want to give the host any default values created in the constructor.\r\n\t\t\t\t\t\tobject val = pi.GetValue(obj);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (val != null)\r\n\t\t\t\t\t\t{\r\n\t\t               \t\tpd.Value = val.ToString();\r\n\t\t               \t}\r\n\t               \t}\r\n               \t}\r\n                \r\n                var cat = pi.GetCustomAttribute&lt;CategoryAttribute&gt;();\r\n                var desc = pi.GetCustomAttribute&lt;DescriptionAttribute&gt;();\r\n                pd.Category = cat == null ? null : cat.Category;\r\n                pd.Description = desc == null ? null : desc.Description;\r\n                pc.Types.Add(pd);\r\n\r\n                if ((!pi.PropertyType.IsValueType) &amp;&amp; (pd.TypeName != \"System.String\"))\r\n                {\r\n                    PropertyInfo[] pisChild = pi.PropertyType.GetProperties(BindingFlags.Public | BindingFlags.Instance);\r\n                    pd.ChildType = new PropertyContainer();\r\n\t\t\t\t\tobject val = pi.GetValue(obj);\r\n                    BuildTypes(val, pd.ChildType, pisChild);\r\n                }\r\n            }\r\n        }\r\n\t}\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_Zip4" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="286a87c4-f448-42e9-a4d4-a037f52287d8" Visible="true" Text="ST_Zip4" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>961</X>
        <Y>-323</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>961</X>
      <Y>-323</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Zip4 : ISemanticType \r\n\t{\r\n\t\tpublic string Zip4 {get; set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_Zip5" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="efee4b6f-93f0-47a5-843b-b759838bfc41" Visible="true" Text="ST_Zip5" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>961</X>
        <Y>-359</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>961</X>
      <Y>-359</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Zip5 : ISemanticType \r\n\t{\r\n\t\tpublic string Zip5 {get; set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_Zip" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="0abe03d0-7ae7-4164-9a31-b40929b87ee0" Visible="true" Text="ST_Zip" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>961</X>
        <Y>-402</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>961</X>
      <Y>-402</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Zip : ISemanticType \r\n\t{\r\n\t\tpublic ST_Zip5 Zip5 {get; set;}\r\n\t\tpublic ST_Zip4 Zip4 {get; set;}\r\n\t\t\r\n\t\tpublic ST_Zip()\r\n\t\t{\r\n\t\t\tZip5 = new ST_Zip5();\r\n\t\t\tZip4 = new ST_Zip4();\r\n\t\t}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_State" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="a7bab06d-251c-4732-bd00-5a7f38062bf4" Visible="true" Text="ST_State" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>961</X>
        <Y>-437</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>961</X>
      <Y>-437</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_State : ISemanticType \r\n\t{\r\n\t\tpublic string State {get; set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_City" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="561f98df-c4fb-4f30-b0c9-438d6698dd57" Visible="true" Text="ST_City" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>961</X>
        <Y>-473</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>28</Height>
      </Size>
      <X>961</X>
      <Y>-473</Y>
      <Width>177</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_City : ISemanticType \r\n\t{\r\n\t\tpublic string City {get; set;}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="ST_Address" ElementName="HopeShapes.SemanticTypeShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="e4258e15-331d-4ad3-bb5e-316b8db38365" Visible="true" Text="ST_Address" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>878</X>
        <Y>115</Y>
      </Location>
      <Size>
        <Width>177</Width>
        <Height>26</Height>
      </Size>
      <X>878</X>
      <Y>115</Y>
      <Width>177</Width>
      <Height>26</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>3</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class ST_Address : ISemanticType \r\n\t{\r\n\t\tpublic string Address1 {get; set;}\r\n\t\tpublic string Address2 {get; set;}\r\n\t\tpublic ST_City City {get; set;}\r\n\t\tpublic ST_State State {get; set;}\r\n\t\tpublic ST_Zip Zip {get; set;}\r\n\t\t\r\n\t\tpublic ST_Address()\r\n\t\t{\r\n\t\t\tCity = new ST_City();\r\n\t\t\tState = new ST_State();\r\n\t\t\tZip = new ST_Zip();\r\n\t\t\t\r\n\t\t\tAddress1 = \"565 Roxbury Rd\";\r\n\t\t\tCity.City = \"Hudson\";\r\n\t\t\tState.State = \"NY\";\r\n\t\t\tZip.Zip5.Zip5 = \"12534\";\r\n\t\t}\r\n\t}\r\n}","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-7278960</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag Name="USPSAddressVerifier" ElementName="HopeShapes.AgentShape, HopeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="edaa6083-9c85-4afd-9184-a4d7d1f39a48" Visible="true" Text="USPS&#xD;&#xA;Address&#xD;&#xA;Verifier" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>207</X>
        <Y>274</Y>
      </Location>
      <Size>
        <Width>81</Width>
        <Height>71</Height>
      </Size>
      <X>207</X>
      <Y>274</Y>
      <Width>81</Width>
      <Height>71</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>8.25</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"Code":"using System;\r\nusing System.Windows.Forms;\r\n\r\nusing Clifton.Core.Semantics;\r\n\r\nnamespace App\r\n{\r\n\tpublic class USPSAddressVerifier : IReceptor\r\n\t{\r\n\t\t[Publishes(typeof(ST_USPSAddressValidateRequest))]\r\n\t\tpublic void Process(ISemanticProcessor proc, IMembrane membrane, ST_Address addr)\r\n\t\t{\r\n\t\t\tAddressValidateRequest avr = new AddressValidateRequest();\r\n\t\t\t// USPS reverses the two address lines.\r\n\t\t\t\r\n\t\t\tif (addr.Address2 == null)\r\n\t\t\t{\r\n\t\t\t\t// Address2, if not provided, must be an empty string, not null! \r\n\t\t\t\taddr.Address2 = String.Empty;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tavr.Address.Address1 = addr.Address2;\r\n\t\t\tavr.Address.Address2 = addr.Address1;\r\n\t\t\tavr.Address.City = addr.City.City;\r\n\t\t\tavr.Address.State = addr.State.State;\r\n\t\t\tavr.Address.Zip5 = addr.Zip.Zip5.Zip5;\r\n\t\t\t\r\n\t\t\tproc.ProcessInstanceFrom&lt;HopeMembrane&gt;(membrane, this, new ST_USPSAddressValidateRequest() {Request = avr});\r\n\t\t}\r\n    }\r\n}\r\n","TextChanged":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>MiddleCenter</TextAlign>
    <Multiline>true</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-5185306</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.AssemblyReferenceBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="2d0c91eb-fb0b-41f0-84cd-1bb2cde37b8d" Visible="true" Text="AssyRef" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1557</X>
        <Y>-431</Y>
      </Location>
      <Size>
        <Width>263</Width>
        <Height>31</Height>
      </Size>
      <X>1557</X>
      <Y>-431</Y>
      <Width>263</Width>
      <Height>31</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>6</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"AssyRef":"System.Windows.Forms.dll"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-16192</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.AssemblyReferenceBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="d84cbcc8-3cb7-4502-9389-05db1e4f851a" Visible="true" Text="AssyRef" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1557</X>
        <Y>-472</Y>
      </Location>
      <Size>
        <Width>263</Width>
        <Height>31</Height>
      </Size>
      <X>1557</X>
      <Y>-472</Y>
      <Width>263</Width>
      <Height>31</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>6</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"AssyRef":"System.Speech.dll"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-16192</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.AssemblyReferenceBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="9285f505-3c98-46a1-bcc1-0c4a034eec4b" Visible="true" Text="AssyRef" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1271</X>
        <Y>-473</Y>
      </Location>
      <Size>
        <Width>263</Width>
        <Height>31</Height>
      </Size>
      <X>1271</X>
      <Y>-473</Y>
      <Width>263</Width>
      <Height>31</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>6</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"AssyRef":"Newtonsoft.Json.dll"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-16192</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="1d18b1fe-e3b7-4556-a10e-de0794b882f1" Visible="true" Text="WebServer.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1514</X>
        <Y>-648</Y>
      </Location>
      <Size>
        <Width>170</Width>
        <Height>29</Height>
      </Size>
      <X>1514</X>
      <Y>-648</Y>
      <Width>170</Width>
      <Height>29</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>WebServer.cs</ExtraData>
    <Json>{"csharp":"","Code":"/* \r\n* Copyright (c) Marc Clifton\r\n* The Code Project Open License (CPOL) 1.02\r\n* http://www.codeproject.com/info/cpol10.aspx\r\n*/\r\n\r\nusing System;\r\nusing System.IO;\r\nusing System.Net;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\n\r\nnamespace App\r\n{\r\n\tpublic class HandlerResponse\r\n\t{\r\n\t\tpublic string Text {get;set;}\r\n\t\tpublic string Mime {get;set;}\r\n\t\t\r\n\t\tpublic HandlerResponse(string text, string mime)\r\n\t\t{\r\n\t\t\tText=text;\r\n\t\t\tMime=mime;\r\n\t\t}\r\n\t}\r\n\t\r\n    public class WebServer\r\n    {\r\n        protected HttpListener listener;\r\n\t\tprotected BaseRouteHandlers routeHandlers;\r\n\r\n        public WebServer(BaseRouteHandlers routeHandlers)\r\n        {\r\n\t\t\tthis.routeHandlers = routeHandlers;\r\n        }\r\n\r\n        public void Start(string ip, int[] ports)\r\n        {\r\n            listener = new HttpListener();\r\n\r\n            foreach (int port in ports)\r\n            {\r\n                string url = IpWithPort(ip, port);\r\n                listener.Prefixes.Add(url);\r\n            }\r\n\r\n            listener.Start();\r\n            Task.Run(() =&gt; WaitForConnection(listener));\r\n        }\r\n\r\n        protected void WaitForConnection(object objListener)\r\n        {\r\n            HttpListener listener = (HttpListener)objListener;\r\n\r\n            while (true)\r\n            {\r\n                // Wait for a connection.  Return to caller while we wait.\r\n                HttpListenerContext context = listener.GetContext();\r\n\r\n                // Redirect to HTTPS if not local and not secure.\r\n                if (!context.Request.IsLocal &amp;&amp; !context.Request.IsSecureConnection)\r\n                {\r\n                    string redirectUrl = context.Request.Url.ToString().Replace(\"http:\", \"https:\");\r\n                    context.Response.Redirect(redirectUrl);\r\n                    context.Response.Close();\r\n                }\r\n                else\r\n                {\r\n                    string data = new StreamReader(context.Request.InputStream, context.Request.ContentEncoding).ReadToEnd();\r\n                    ProcessRoute(context, data);\r\n                }\r\n            }\r\n        }\r\n\r\n        protected void ProcessRoute(HttpListenerContext context, string data)\r\n        {\r\n        \tApp.Program.Log(context.Request.Url.ToString());\r\n            //Program.form.Invoke(() =&gt;\r\n            //{\r\n            //    Program.tbLog.AppendText(context.Request.Url.ToString() + \"\\n\");\r\n            //    Program.tbLog.AppendText(data + \"\\n\");\r\n            //});\r\n\r\n            string route = context.Request.Url.ToString().LeftOf('?').RightOfRightmostOf('/');\r\n            string parms = context.Request.Url.ToString().RightOf('?');\r\n            Func&lt;HttpListenerContext, string, HandlerResponse&gt; handler;\r\n\r\n            if (routeHandlers.Routes.TryGetValue(route, out handler))\r\n            {\r\n                try\r\n                {\r\n                    var resp = handler(context, parms);\r\n\t\t\t\t\tResponse(context, resp.Text, resp.Mime);\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                \tApp.Program.Log(ex.Message);\r\n                \tApp.Program.Log(ex.StackTrace);\r\n                    //Program.form.BeginInvoke(() =&gt;\r\n                    //{\r\n                    //    Program.tbLog.AppendText(ex.Message + \"\\n\");\r\n                    //    Program.tbLog.AppendText(ex.StackTrace + \"\\n\");\r\n                    //});\r\n                }\r\n            }\r\n\r\n            context.Response.Close();\r\n        }\r\n\r\n\r\n        protected void Response(HttpListenerContext context, string resp, string contentType)\r\n        {\r\n            byte[] utf8data = Encoding.UTF8.GetBytes(resp);\r\n            context.Response.ContentType = contentType;\r\n            context.Response.ContentEncoding = Encoding.UTF8;\r\n            context.Response.ContentLength64 = utf8data.Length;\r\n            context.Response.OutputStream.Write(utf8data, 0, utf8data.Length);\r\n        }\r\n\r\n        protected string IpWithPort(string ip, int port)\r\n        {\r\n            string ret;\r\n\r\n            if (port == 80)\r\n            {\r\n                ret = \"http://\" + ip + \"/\";\r\n            }\r\n            else if ((ip == \"localhost\") || (ip == \"127.0.0.1\"))\r\n            {\r\n                ret = \"http://\" + ip + \":\" + port.ToString() + \"/\";\r\n            }\r\n            else\r\n            {\r\n                ret = \"https://\" + ip + \":\" + port.ToString() + \"/\";\r\n            }\r\n\r\n            return ret;\r\n        }\r\n    }\r\n}","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="0a870c68-23e4-4488-8cea-e58ec934cad3" Visible="true" Text="BaseRouteHandlers.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1512</X>
        <Y>-691</Y>
      </Location>
      <Size>
        <Width>169</Width>
        <Height>28</Height>
      </Size>
      <X>1512</X>
      <Y>-691</Y>
      <Width>169</Width>
      <Height>28</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>BaseRouteHandlers.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.Net;\r\n\r\nnamespace App\r\n{\r\n\tpublic abstract class BaseRouteHandlers\r\n\t{\r\n\t\tpublic Dictionary&lt;string, Func&lt;HttpListenerContext, string, HandlerResponse&gt;&gt; Routes { get { return routes; } }\r\n\t\tprotected Dictionary&lt;string, Func&lt;HttpListenerContext, string, HandlerResponse&gt;&gt; routes;\r\n\t}\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="5796b000-ccdf-4196-940d-d355dc71c22f" Visible="true" Text="HttpGet.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1311</X>
        <Y>-626</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>1311</X>
      <Y>-626</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>HttpGet.cs</ExtraData>
    <Json>{"csharp":"","Code":"/* \r\n* Copyright (c) Marc Clifton\r\n* The Code Project Open License (CPOL) 1.02\r\n* http://www.codeproject.com/info/cpol10.aspx\r\n*/\r\n\r\nusing System;\r\nusing System.Net;\r\nusing System.IO;\r\n\r\nnamespace App\r\n{\r\n\t// Override WebClient so we can change the timeout.\r\n\t// https://stackoverflow.com/questions/1789627/how-to-change-the-timeout-on-a-net-webclient-object\r\n\tinternal class MyWebClient : WebClient\r\n    {\r\n        protected override WebRequest GetWebRequest(Uri uri)\r\n        {\r\n            WebRequest w = base.GetWebRequest(uri);\r\n            w.Timeout = 20 * 60 * 1000;\r\n            return w;\r\n        }\r\n    }\r\n    \r\n    public static class Http\r\n    {\r\n        public static string Get(string uri)\r\n        {\r\n            WebClient client = new MyWebClient();\r\n\r\n            // Add a user agent header in case the \r\n            // requested URI contains a query.\r\n\r\n            client.Headers.Add(\"user-agent\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705;)\");\r\n\r\n            Stream data = client.OpenRead(uri);\r\n            StreamReader reader = new StreamReader(data);\r\n            string s = reader.ReadToEnd();\r\n            data.Close();\r\n            reader.Close();\r\n\r\n            return s;\r\n        }\r\n    }\r\n}","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="03529e92-71a9-4861-a075-73b40ca624e3" Visible="true" Text="PythonLauncher.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1311</X>
        <Y>-566</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>1311</X>
      <Y>-566</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>PythonLauncher.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Windows.Forms;\r\n\r\nnamespace App\r\n{\r\n\tpublic static class PythonLauncher\r\n\t{\r\n        public static Process LaunchProcess(string arguments, Action&lt;string&gt; onOutput, Action&lt;string&gt; onError = null)\r\n        {\r\n        \tstring processName = \"python\";\r\n            Process p = new Process();\r\n            p.StartInfo.UseShellExecute = false;\r\n            p.StartInfo.RedirectStandardOutput = true;\r\n            p.StartInfo.RedirectStandardError = true;\r\n            p.StartInfo.RedirectStandardInput = true;\r\n            p.StartInfo.FileName = processName;\r\n            p.StartInfo.Arguments = arguments;\r\n            p.StartInfo.CreateNoWindow = true;\r\n\r\n            p.OutputDataReceived += (sndr, args) =&gt; { if (args.Data != null) onOutput(args.Data); };\r\n\r\n            if (onError != null)\r\n            {\r\n                p.ErrorDataReceived += (sndr, args) =&gt; { if (args.Data != null) onError(args.Data); };\r\n            }\r\n\r\n            p.Start();\r\n\r\n            // Interestingly, this has to be called after Start().\r\n            p.BeginOutputReadLine();\r\n            p.BeginErrorReadLine();\r\n\r\n            return p;\r\n        }\r\n    }\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.PythonFileBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="163ac284-f1f3-49aa-868f-2bf28df219bd" Visible="true" Text="personOfInterest.py" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1473</X>
        <Y>-569</Y>
      </Location>
      <Size>
        <Width>158</Width>
        <Height>30</Height>
      </Size>
      <X>1473</X>
      <Y>-569</Y>
      <Width>158</Width>
      <Height>30</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>personOfInterest.py</ExtraData>
    <Json>{"python":"#pylint: disable=C0111, C0301, C0303, W0311, W0614, W0401, W0232, W0702, W0703, W0201\r\n# Make sure pip and setup tools are up to date:\r\n# python -m pip install -U pip\r\n# pip install -U setuptools\r\n# pip install requests\r\n# pip install lxml\r\n# pip install cssselect\nimport requests\r\nimport sys\r\nfrom lxml import html\r\nfrom lxml.cssselect import CSSSelector\r\nfrom lxml import etree\r\n \r\nurl = \"http://www.onthisday.com/birthdays/\" + sys.argv[1] + \"/\" + sys.argv[2]\r\n# print(\"URL: \" + url)\r\npage = requests.get(url)\r\ntree = html.fromstring(page.content)\r\nsel = CSSSelector('.section--person-of-interest')\r\npois = sel(tree)\r\n \r\nfor poi in pois:\r\n print(poi.xpath(\"div/div/div[1]/p\")[0].text_content().encode('cp437', errors='replace'))\r\n \r\n ","TextChanged":"True","GenerateClass":"True"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.AssemblyReferenceBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="000c30bf-fe7f-4ba2-bad6-484caa24820c" Visible="true" Text="AssyRef" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1272</X>
        <Y>-431</Y>
      </Location>
      <Size>
        <Width>263</Width>
        <Height>31</Height>
      </Size>
      <X>1272</X>
      <Y>-431</Y>
      <Width>263</Width>
      <Height>31</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>6</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"AssyRef":"Clifton.Core.dll"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-16192</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.AssemblyReferenceBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="18393e74-3cae-4b9f-9be3-e37e5721df66" Visible="true" Text="AssyRef" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1271</X>
        <Y>-388</Y>
      </Location>
      <Size>
        <Width>263</Width>
        <Height>31</Height>
      </Size>
      <X>1271</X>
      <Y>-388</Y>
      <Width>263</Width>
      <Height>31</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>6</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <Json>{"AssyRef":"Clifton.SemanticProcessorService.dll"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopCenter</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-16192</FillBrushColor>
  </ElementPropertyBag>
  <ElementPropertyBag ElementName="FlowSharpCodeShapes.CSharpClassBox, FlowSharpCodeShapes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" Id="319da344-474c-4717-817d-f5791d5be3d8" Visible="true" Text="Program.cs" IsBookmarked="false" HasCornerAnchors="true" HasCenterAnchors="true" HasLeftRightAnchors="false" HasTopBottomAnchors="false" HasCenterAnchor="false" HasCornerConnections="true" HasCenterConnections="true" HasLeftRightConnections="false" HasTopBottomConnections="false" HasCenterConnection="false">
    <DisplayRectangle>
      <Location>
        <X>1310</X>
        <Y>-696</Y>
      </Location>
      <Size>
        <Width>133</Width>
        <Height>25</Height>
      </Size>
      <X>1310</X>
      <Y>-696</Y>
      <Width>133</Width>
      <Height>25</Height>
    </DisplayRectangle>
    <StartPoint>
      <X>0</X>
      <Y>0</Y>
    </StartPoint>
    <EndPoint>
      <X>0</X>
      <Y>0</Y>
    </EndPoint>
    <HyAdjust>0</HyAdjust>
    <VxAdjust>0</VxAdjust>
    <BorderPenWidth>1</BorderPenWidth>
    <StartCap>None</StartCap>
    <EndCap>None</EndCap>
    <StartConnectedShapeId>00000000-0000-0000-0000-000000000000</StartConnectedShapeId>
    <EndConnectedShapeId>00000000-0000-0000-0000-000000000000</EndConnectedShapeId>
    <TextFontFamily>Microsoft Sans Serif</TextFontFamily>
    <TextFontSize>10</TextFontSize>
    <TextFontUnderline>false</TextFontUnderline>
    <TextFontStrikeout>false</TextFontStrikeout>
    <TextFontItalic>false</TextFontItalic>
    <TextFontBold>false</TextFontBold>
    <ExtraData>Program.cs</ExtraData>
    <Json>{"csharp":"","Code":"using System;\r\nusing System.Drawing;\r\nusing System.Threading;\r\nusing System.Windows.Forms;\r\n\r\nusing Newtonsoft.Json;\r\n\r\nusing Clifton.Core.ExtensionMethods;\r\nusing Clifton.Core.Semantics;\r\nusing Clifton.Core.Services.SemanticProcessorService;\r\n\r\nnamespace App\r\n{\r\n\tpublic class HopeMembrane : Membrane { }\r\n\t\r\n    /// &lt;summary&gt;\r\n    /// For testing the FlowSharpHopeService.StandAloneRunner.\r\n    /// Note that this project references a DLL built by FlowSharpHopeService.\r\n    /// &lt;/summary&gt;\r\n    public static class Program\r\n    {\r\n        public static TextBox tbLog;\r\n        public static Form form;\r\n\t\tpublic static SemanticProcessor sp;\r\n\t\tpublic static LayoutManager layoutManager;\r\n\r\n\t\tprivate static string url = \"http://localhost:5002/\";\r\n\t\tprivate static string PROCESSING = \"processing\";\r\n\r\n\t\t[STAThread]\r\n        public static void Main()\r\n        {\r\n            Application.EnableVisualStyles();\r\n            Application.SetCompatibleTextRenderingDefault(false);\r\n            \r\n            layoutManager = new LayoutManager();\r\n\r\n\t\t\tsp = new SemanticProcessor();\r\n\t\t\tsp.Processing += Processing;\r\n\r\n\t\t\tRouteHandlers routeHandlers = new RouteHandlers(sp);\r\n\r\n            WebServer webServer = new WebServer(routeHandlers);\r\n            webServer.Start(\"localhost\", new int[] { 5001 });\r\n\r\n            form = new Form();\r\n            form.Location = new Point(100, 100);\r\n            form.Size = new Size(500, 200);\r\n            form.Text = \"Stand Alone Runner\";\r\n\r\n            tbLog = new TextBox();\r\n            tbLog.Multiline = true;\r\n            tbLog.Dock = DockStyle.Fill;\r\n            tbLog.ScrollBars = ScrollBars.Both;\r\n            form.Controls.Add(tbLog);\r\n\r\n            Application.Run(form);\r\n        }\r\n        \r\n        public static void Close()\r\n        {\r\n        \tform.Close();\r\n        }\r\n        \r\n        public static void Log(string msg)\r\n        {\r\n        \tform.Invoke(()=&gt;tbLog.AppendText(msg + \"\\r\\n\"));\r\n        }\r\n\r\n\t\tprivate static void Processing(object sender, ProcessEventArgs args)\r\n\t\t{\r\n\t\t\t// Log(\"Thread ID: \" + Thread.CurrentThread.ManagedThreadId + \"   To: \" + args.ToReceptor.GetType().FullName); \r\n\t\t\tstring fromMembraneTypeName = null;\r\n\t\t\tstring fromReceptorTypeName = null;\r\n\t\t\t\r\n\t\t\tif (args.FromMembrane != null)\r\n\t\t\t{\r\n\t\t\t\tfromMembraneTypeName = args.FromMembrane.GetType().FullName;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (args.FromReceptor != null)\r\n\t\t\t{\r\n\t\t\t\tfromReceptorTypeName = args.FromReceptor.GetType().FullName;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tstring json = JsonConvert.SerializeObject(new\r\n\t\t\t{\r\n\t\t\t\tFromMembraneTypeName = fromMembraneTypeName,\r\n\t\t\t\tFromReceptorTypeName = fromReceptorTypeName,\r\n\t\t\t\tToMembraneTypeName = args.ToMembrane.GetType().FullName,\r\n\t\t\t\tToReceptorTypeName = args.ToReceptor.GetType().FullName,\r\n\t\t\t\tSemanticTypeTypeName = args.SemanticType.GetType().FullName,\r\n\t\t\t});\r\n\r\n\t\t\tHttp.Get(url + PROCESSING + \"?proc=\" + json);\r\n\t\t}\r\n\t}\r\n}\r\n","TextChanged":"True","NamespaceName":"Namespace","ClassName":"Class","MethodName":"Method"}</Json>
    <Connections />
    <Children />
    <TextAlign>TopLeft</TextAlign>
    <Multiline>false</Multiline>
    <TextColor>-16777216</TextColor>
    <BorderPenColor>-16777216</BorderPenColor>
    <FillBrushColor>-1</FillBrushColor>
  </ElementPropertyBag>
</ArrayOfElementPropertyBag>